//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;


/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   int in_smpl = 0;
   int in_move = 0;
   int in_jmp =0;
   int in_cjmp =0;
   int in_pro=0;
   int in_bin =0;
   public void print_start_routine(String method_name)
   {
      System.out.println("\t"+"\t"+".text");
      System.out.println("\t"+"\t"+".globl "+method_name);
   }
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      print_start_routine("main");
      System.out.println("main:");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      int stackslots = Integer.parseInt((String)n.f5.accept(this, argu));
      System.out.println("\t\t\tsw $fp, 0($sp)");
      System.out.println("\t\t\tsw $ra, -4($sp)");
      System.out.println("\t\t\tmove $fp, $sp");
      System.out.println("\t\t\tsubu $sp, $sp, "+((stackslots+2)*4));
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);

      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
     System.out.println("\t\t\tlw $ra, -4($fp)");
      System.out.println("\t\t\tlw $fp, 0($fp)");
      System.out.println("\t\t\taddu $sp, $sp, "+((stackslots+2)*4));
      System.out.println("\t\t\tj $ra");
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      System.out.println("\n\t\t\t.data");
      System.out.println("\t\t\t.align 0");
      System.out.println("newl:\t\t.asciiz \"\\n\" ");
      System.out.println("str_er:  .asciiz \" ERROR: abnormal termination\\n\" " );
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      in_pro =1;
      String method_name = (String)n.f0.accept(this, argu);
      in_pro=0;
      print_start_routine(method_name);
      System.out.println(method_name+":");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
       int stackslots = Integer.parseInt((String)n.f5.accept(this, argu));
      System.out.println("\t\t\tsw $fp, 0($sp)");
      System.out.println("\t\t\tsw $ra, -4($sp)");
      System.out.println("\t\t\tmove $fp, $sp");
      System.out.println("\t\t\tsubu $sp, $sp, "+((stackslots+2)*4));
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
       System.out.println("\t\t\tlw $ra, -4($fp)");
      System.out.println("\t\t\tlw $fp, 0($fp)");
      System.out.println("\t\t\taddu $sp, $sp, "+((stackslots+2)*4));
      System.out.println("\t\t\tj $ra");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("\t\t\tnop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("\t\t\tli $v0, 4");
      System.out.println("\t\t\tla $a0, str_er");
      System.out.println("\t\t\tsyscall");
      System.out.println("\t\t\tli $v0, 10");
      System.out.println("\t\t\tsyscall");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      in_cjmp=1;
      n.f0.accept(this, argu);
      String register = (String)n.f1.accept(this, argu);
      String Label = (String)n.f2.accept(this, argu);
      System.out.println("\t\t\tbeqz "+register+", "+Label);
      in_cjmp = 0;
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      in_jmp =1;
      n.f0.accept(this, argu);
      String Label = (String)n.f1.accept(this, argu);
      System.out.println("\t\t\tb "+Label);
      in_jmp =0;
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
     String register = (String) n.f1.accept(this, argu);
     String offset = (String) n.f2.accept(this, argu);
     String register1 = (String) n.f3.accept(this, argu);
     System.out.println("\t\t\tsw "+register1+", "+offset+"("+register+")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
       n.f0.accept(this, argu);
      String register = (String)n.f1.accept(this, argu);
      String register1= (String)n.f2.accept(this, argu);
      String offset = (String)n.f3.accept(this, argu);
      System.out.println("\t\t\tlw "+register+ ", "+ offset+"("+register1+")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      in_move = 1;
      n.f0.accept(this, argu);

      String register = (String)n.f1.accept(this, argu);
      argu =(A)register;
      n.f2.accept(this, argu);
      in_move=0;
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String exp = (String)n.f1.accept(this, argu);
      String words[] = exp.split(" ");
      if(words[0].equals("i"))
      {
         System.out.println("\t\t\tli $a0, "+words[1]);
      }
      else if(words[0].equals("r"))
      {
         System.out.println("\t\t\tmove $a0, "+words[1]);
      }
      else
      {
         System.out.println("\t\t\tla $a0, "+words[1]);
      }
      System.out.println("\t\t\tli $v0, 1");
      System.out.println("\t\t\tsyscall");
      System.out.println("\t\t\tla $a0, newl");
      System.out.println("\t\t\tli $v0, 4");
      System.out.println("\t\t\tsyscall");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String register = (String)n.f1.accept(this, argu);
      int number = Integer.parseInt((String)n.f2.accept(this, argu));
      int offset = 8 + (number)*4;
      System.out.println("\t\t\tlw "+register+", "+"-"+offset+"($fp)");
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
     int number = Integer.parseInt((String)n.f1.accept(this, argu));
      String register = (String)n.f2.accept(this, argu);
      int offset = 8 + ((number)*4);
      System.out.println("\t\t\tsw "+register+", "+"-"+offset+"($fp)");
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int number = Integer.parseInt((String)n.f1.accept(this, argu));
     String register = (String)n.f2.accept(this, argu);
     int offset = 8 + ((number-1)*4);
     System.out.println("\t\t\tsw "+register+", "+"-"+offset+"($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
     String exp = (String) n.f1.accept(this, argu);
     String[] words = exp.split(" ");
     if(words[0].equals("r"))
     {
      System.out.println("\t\t\tmove"+" $v0, "+words[1]);
      System.out.println("\t\t\tjalr"+" $v0");
     }
     else if(words[0].equals("lbl"))
     {
      System.out.println("\t\t\tla"+" $v0, "+words[1]);
      System.out.println("\t\t\tjalr"+" $v0");
     }

      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      String dest = (String)argu;
      n.f0.accept(this, argu);
      String exp = (String)n.f1.accept(this, argu);
      String words[] = exp.split(" ");
      if(words[0].equals("i"))
      {
         System.out.println("\t\t\tli $a0, "+words[1]);
      }
      else if(words[0].equals("r"))
      {
         System.out.println("\t\t\tmove $a0, "+words[1]);
      }
      else
      {
         System.out.println("\t\t\tla $a0, "+words[1]);
      }
      System.out.println("\t\t\tli $v0, 9");
      System.out.println("\t\t\tsyscall");
      System.out.println("\t\t\tmove "+dest+", "+"$v0");
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      in_bin =1;
      String dst = (String)argu;
      String op = (String)n.f0.accept(this, argu);
      // System.out.println(op);
      String  reg = (String)n.f1.accept(this, argu);
      String simple_exp = (String)n.f2.accept(this, argu);
      String words[] = simple_exp.split(" ");
      if(op.equals("LE"))
      {
         System.out.println("\t\t\tsle "+dst+ ", "+reg+", "+words[1]);
      }
      if(op.equals("NE"))
      {
         System.out.println("\t\t\tsne "+dst+ ", "+reg+", "+words[1]);
      }
      if(op.equals("PLUS"))
      {
         System.out.println("\t\t\tadd "+dst+ ", "+reg+", "+words[1]);
      }
      if(op.equals("MINUS"))
      {
         System.out.println("\t\t\tsub "+dst+ ", "+reg+", "+words[1]);
      }
      if(op.equals("TIMES"))
      {
         System.out.println("\t\t\tmul "+dst+ ", "+reg+", "+words[1]);
      }
      if(op.equals("DIV"))
      {
         System.out.println("\t\t\tdiv "+dst+ ", "+reg+", "+words[1]);
      }
      in_bin=0;
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)n.f0.choice.toString();
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String offset = (String)n.f1.accept(this, argu);
      return (R)offset;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      in_smpl = 1;
      String value = (String)n.f0.accept(this, argu);
      String dest = (String)argu;
      String[] words = value.split(" ");
      if(in_move == 1 && in_bin==0)
      {
         if(words[0].equals("i"))
         {
            System.out.println("\t\t\tli "+dest+", "+words[1]);
         }
         else if (words[0].equals("r"))
         {
            System.out.println("\t\t\tmove "+dest+", "+words[1]);
         }
         else 
         {
            System.out.println("\t\t\tla "+dest+", "+words[1]);
         }
      }
      in_smpl = 0;
      return (R)value;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String register = n.f0.choice.toString();
      register = "$"+register;
      if(in_smpl==1)
      {
         return (R)("r "+register);
      }
      else
      {
         return (R)register;
      }
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
       String int_value = n.f0.tokenImage;
      if(in_smpl==1)
      {
         return (R)("i "+int_value);
      }
      else
      {
         return (R)int_value;
      }
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
       String lbl_value = n.f0.tokenImage;
       if(in_jmp==0 && in_cjmp==0 && in_smpl==0 && in_pro==0)
       System.out.println(lbl_value+":");
      if(in_smpl==1)
      {
         return (R)("lbl "+lbl_value);
      }
      else
      {
         return (R)lbl_value;
      }
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
