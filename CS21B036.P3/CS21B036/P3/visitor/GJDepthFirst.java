//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
import java.util.*;

class ClassDetails {
   public String name;
   public Vector<String> method_names = new Vector<>();
   public Vector<String> variables = new Vector<>();
   public Vector<String> variable_types = new Vector<>();
   public boolean extended;
   public String extended_class_name;
}

class MethodDetails
{
   public String name;
   public String class_of_method;
   public Vector<String> variables = new Vector<>();
   public Vector<String> variable_types = new Vector<>();
   public Vector<String> parameter_types = new Vector<>();
   public Vector<String> parameters = new Vector<>();
   public HashMap<String, String> temp_mapping_var = new HashMap<>();
   public HashMap<String, String> temp_mapping_par = new HashMap<>();
   public String return_type;
}
class VariableDetails
{
   public String var_name;
   public String class_of_var;
   public String method_of_var;
   public String type_of_var;
   public boolean is_parameter;

}
class method_offset
{
   public String class_name;
   public Integer offset;
}
class structure
{
   public Vector<String> fields = new Vector<>();
   public Vector<String> cor_classes = new Vector<>();
   public Vector<Integer> field_offset = new Vector<>();
   public HashMap<String, method_offset> vtable = new HashMap<>();
}
class rettAttr
{
   public String temp;
   public String type;
   public String value;
}
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
  
   Vector<String> par_list = new Vector<>();
   public int parse_no = 1;
   public int inclass = 1;
   public int  is_main = 0;
   public int in_expr = 0;
   public int in_prim = 0;
   public int counter2 = 0;
   public String myclass;
   public String mymethod="";
   HashMap<String, ClassDetails> class_details = new HashMap<>();
   Vector<MethodDetails> method_details = new Vector<>();
   Vector<VariableDetails> variable_details = new Vector<>();
   HashMap<String, structure> c_eq_classes = new HashMap<>();
   int counter =0 ;
   public String gettypescope( String variable , String className , String methodName)
   {
     
      for(int i=0 ;i<method_details.size(); i++)
      {
         MethodDetails mm = method_details.get(i);
         if(mm.name == methodName && mm.class_of_method == className)
         {
            if(mm.variables.contains(variable))
            {
               for(int j=0; j<mm.variables.size() ;j++)
               {
                   String elem = mm.variables.get(j);
                   if(elem == variable)
                   {
                     return mm.variable_types.get(j);
                   }

               }
               
            }
            if(mm.parameters.contains(variable))
            {
              for(int j=0; j<mm.parameters.size() ;j++)
               {
                   String elem = mm.parameters.get(j);
                   if(elem == variable)
                   {
                     return mm.parameter_types.get(j);
                   }

               }
            }
         }
      }
      
      if(class_details.get(className).variables.contains(variable))
      {
         for(int k = 0; k< class_details.get(className).variables.size(); k++)
         {
            String elem = class_details.get(className).variables.get(k) ;
            if(elem == variable)
            {
               return class_details.get(className).variable_types.get(k);
            }
         }
      }
      if(class_details.get(className).extended == true)
      {
         String cur_class = className;
         while(true)
         {
           String extended_class = class_details.get(cur_class).extended_class_name;
         //   System.out.println(extended_class+"hhyyy");
           if(class_details.get(extended_class).variables.contains(variable))
           {
              for(int k = 0; k< class_details.get(extended_class).variables.size(); k++)
               {
                  String elem = class_details.get(extended_class).variables.get(k) ;
                  if(elem == variable)
                  {
                     return class_details.get(extended_class).variable_types.get(k);
                  }
               }
           }
           if(!class_details.get(extended_class).extended)
           {
           
            break;
           }
           cur_class = extended_class;
         }
      }
      return "not found";
   }

   

   public String genTemp()
   {
      String temp = "TEMP"+ " " + counter;
      counter++;
      return temp;
   }
    public String genLabel()
   {
      String temp2 = "L" + counter2;
      counter2++;
      return temp2;
   }
   
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      parse_no = (int)argu;

      if(parse_no==1)
     { 
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      // for (Map.Entry<String, ClassDetails> entry : class_details.entrySet()) 
      //   {
      //       String key = entry.getKey();
      //       ClassDetails value = entry.getValue();
      //       System.out.println("Key: " + key + ", Value: " + value.name + " "+ value.variables+ " "+value.method_names+ " "+value.extended_class_name + " " + value.variable_types);
      //   }
         
      // for (int i = 0; i < method_details.size(); i++) {
      // MethodDetails element = method_details.get(i);
      // System.out.println(element.name+" "+ element.class_of_method +" "+element.return_type+ " "+element.parameter_types+" "+ element.parameters + " " + element.variables + " " + element.variable_types );
      // }

      // for (int i = 0; i < variable_details.size(); i++) {
      //  VariableDetails element = variable_details.get(i);
     
      //   System.out.println(element.var_name+" "+ element.class_of_var +" "+element.method_of_var+ " "+ element.type_of_var+ " "+ element.is_parameter);
      // }
       
      for (int i = 0; i < method_details.size(); i++) 
      {
       MethodDetails element = method_details.get(i);
       for(int j=0;j<element.parameters.size();j++)
       {
          String temp = "TEMP "+(j+1);
          element.temp_mapping_par.put(element.parameters.get(j),temp);
       }
       
      }
       for (Map.Entry<String, ClassDetails> entry : class_details.entrySet()) 
        {
            String key = entry.getKey();
            ClassDetails value = entry.getValue();
            structure element = new structure();
            for(int i =0;i<value.variables.size();i++)
            {
               element.fields.add(value.variables.get(i));
               element.cor_classes.add(key);
               element.field_offset.add(i+1);
            }
            for(int i=0;i<value.method_names.size();i++)
            {
               method_offset elem = new method_offset();
               elem.class_name = key;
               elem.offset = i;
               element.vtable.put(value.method_names.get(i),elem);
            }
            // System.out.println(key);
            if(class_details.get(key).extended)
            {
               String cur_class = key;
               
               while(class_details.get(cur_class).extended)
               {
                  cur_class = class_details.get(cur_class).extended_class_name;
                  ClassDetails value1 = class_details.get(cur_class);
                  // System.out.println(value1.variables);
                  for(int i =0;i<value1.variables.size();i++)
                  {
                     
                     element.fields.add(value1.variables.get(i));
                     
                     element.cor_classes.add(cur_class);
                     
                     element.field_offset.add(element.field_offset.size()+1);
                     
                  }
                  for(int i=0;i<value1.method_names.size();i++)
                  {
                     method_offset elem = new method_offset();
                     elem.class_name = cur_class;
                     elem.offset = element.vtable.size();
                     if(!element.vtable.containsKey(value1.method_names.get(i)))
                     element.vtable.put(value1.method_names.get(i),elem);
                  }
                  
               }
            }
            c_eq_classes.put(key, element);
        }
        
      //   for (Map.Entry<String, structure> entry : c_eq_classes.entrySet()) 
      //   {
      //       String key = entry.getKey();
      //       structure value = entry.getValue();
      //       System.out.println(key);
      //       System.out.println(value.fields);
      //       System.out.println(value.field_offset);
      //       System.out.println(value.cor_classes);
      //       for(Map.Entry<String, method_offset>entrier : value.vtable.entrySet())
      //       {
      //          String keyr = entrier.getKey();
      //          method_offset valuer = entrier.getValue();
      //          System.out.print(keyr+" ");
      //          System.out.println(valuer.class_name+" "+valuer.offset);
      //       }
      //   }
        
      
      return _ret;
   }
   else
   {
 
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;

   }

   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      if(parse_no==1)
      {
         n.f0.accept(this, argu);
         String main_class_name = (String)n.f1.accept(this,argu);
         ClassDetails main_class_details = new ClassDetails();
         main_class_details.name = main_class_name;
         class_details.put(main_class_name,main_class_details);
         argu = (A)main_class_details;
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);   
         n.f14.accept(this, argu); 
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);

         return _ret;
      }
      else
      {
         n.f0.accept(this, argu);
         System.out.println("MAIN");
         rettAttr main = (rettAttr) n.f1.accept(this, argu);
         // System.out.println(main.value);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu); 
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
         System.out.println("END");
         return _ret;

      }
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      if(parse_no==1)
      {
         n.f0.accept(this, argu);
         String class_name = (String)n.f1.accept(this, argu);
         ClassDetails cur_class = new ClassDetails();
         cur_class.name = class_name;
         class_details.put(class_name,cur_class);
         argu = (A)cur_class;
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         return _ret;
     }
     else
     {
         inclass = 1;
         n.f0.accept(this, argu);
         rettAttr classic = (rettAttr) n.f1.accept(this, argu);
         String class_name = classic.value;
         ClassDetails curclassdeDetails = class_details.get(class_name);
         argu = (A)curclassdeDetails;
         myclass = class_name;
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         return _ret;
     }
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      if(parse_no==1)
     {
         n.f0.accept(this, argu);
         String class_name = (String)n.f1.accept(this, argu);
         n.f2.accept(this, argu);

         String parent_class = (String) n.f3.accept(this, argu);
         ClassDetails cur_class = new ClassDetails();
         cur_class.name = class_name;
         cur_class.extended_class_name = parent_class;
         cur_class.extended = true;
   
         class_details.put(class_name,cur_class);
        
         argu = (A) cur_class;
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         return _ret;
     }
     else
     {
         inclass =1;
         n.f0.accept(this, argu);
         rettAttr classic = (rettAttr) n.f1.accept(this, argu);
         String class_name = classic.value;
         ClassDetails curclassdeDetails = class_details.get(class_name);
         argu = (A)curclassdeDetails;
         myclass = class_name;
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         return _ret;
     }
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      if (parse_no==1)
      {
         String variable_type = (String) n.f0.accept(this, argu);
         String variable_name = (String) n.f1.accept(this, argu);
         ClassDetails Argu = (ClassDetails) argu;
         if(Argu.method_names.size()==0)
         {
            Argu.variables.add(variable_name);
            Argu.variable_types.add(variable_type);
         }

            VariableDetails cur_var = new VariableDetails();
            
            int length = Argu.method_names.size();
            if(length==0)
            {
                  cur_var.var_name = variable_name;
                  cur_var.type_of_var = variable_type;
                  cur_var.class_of_var = Argu.name;
                  cur_var.is_parameter = false;
                  variable_details.add(cur_var);
            }
            else
            {
                  
                  cur_var.var_name = variable_name;
                  cur_var.type_of_var = variable_type;
                  cur_var.method_of_var = Argu.method_names.get(length-1);
                  cur_var.class_of_var = Argu.name;
                  cur_var.is_parameter = false;

                  variable_details.add(cur_var);

                  for(int i=0; i<method_details.size();i++)
                  {
                     MethodDetails m = method_details.get(i);
                     if(m.class_of_method== Argu.name && m.name == Argu.method_names.get(length-1))
                     {
                        m.variables.add(variable_name);
                        m.variable_types.add(variable_type);
                     }
                  }
            }
         
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         n.f0.accept(this, argu);
         
         rettAttr vars = (rettAttr)n.f1.accept(this, argu);
         String var_name = vars.value;
         // System.out.println(mymethod);
         if(!mymethod.equals(""))
         {
            for(int i =0;i<method_details.size();i++)
            {
               MethodDetails element = method_details.get(i);
               if(element.name==mymethod && element.class_of_method==myclass)
               {
                  element.temp_mapping_var.put(var_name, genTemp());
               }
            }
            // for(int i =0;i<method_details.size();i++)
            // {
            //    MethodDetails element = method_details.get(i);
            //    if(element.name==mymethod && element.class_of_method==myclass)
            //    {
            //       System.out.println(element.temp_mapping_par+"omg");
            //       System.out.println(element.temp_mapping_var+"daffy");
            //    }
            // }
         }
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      if(parse_no==1)
      {
         n.f0.accept(this, argu);
         String return_type = (String)n.f1.accept(this, argu);
         String method = (String) n.f2.accept(this, argu);
         ClassDetails Argu = (ClassDetails) argu;
         Argu.method_names.add(method);
        
         MethodDetails cur_method = new MethodDetails();
         cur_method.name = method;
         cur_method.class_of_method = Argu.name;
         cur_method.return_type = return_type;
      
         method_details.add(cur_method);
         argu = (A)Argu ;
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         return _ret;
     }
     else
     {
         inclass = 2;
         ClassDetails Argu = (ClassDetails) argu;
         n.f0.accept(this, argu);
         rettAttr retic = (rettAttr) n.f1.accept(this, argu);
         String ret_type = retic.value;
         rettAttr methodobj = (rettAttr) n.f2.accept(this, argu);
         String method = methodobj.value;
         // System.out.println(method);
         mymethod = method;
         
         for(int i =0 ;i<method_details.size() ; i++)
         {
            MethodDetails element = method_details.get(i);
            if(element.name == method && element.class_of_method==Argu.name)
            {
               counter = element.parameters.size()+1;
               // System.out.println("Counter at "+ mymethod + counter);
               argu = (A)element;
               break;
            }
         }
         System.out.println(myclass+"_"+mymethod+" ["+counter+"]");
         System.out.println("BEGIN");
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         // for(int i =0;i<method_details.size();i++)
         //    {
         //       MethodDetails element = method_details.get(i);
         //       if(element.name==mymethod && element.class_of_method==myclass)
         //       {
         //          System.out.println(element.temp_mapping_var);
         //          System.out.println(element.temp_mapping_par);
         //       }
         //    }
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
        
         rettAttr ret_Type = (rettAttr)n.f10.accept(this, argu);
          System.out.println("RETURN "+ret_Type.temp);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         System.out.println("END");
         mymethod = "";
         return _ret;

     }
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      if(parse_no==1)
      {
         String para_type = (String)n.f0.accept(this, argu);
         String para = (String)n.f1.accept(this, argu);
         ClassDetails aa = (ClassDetails)argu;

         String cur_method = aa.method_names.get(aa.method_names.size()-1);

         for (int i = 0; i < method_details.size(); i++) 
         {
            MethodDetails element = method_details.get(i);
            if(element.class_of_method == aa.name&& element.name == cur_method)
            {
               element.parameter_types.add(para_type);
               element.parameters.add(para);
               break;
            }
         }
         VariableDetails cur_var = new VariableDetails();
         cur_var.var_name = para;
         cur_var.type_of_var = para_type;
         cur_var.method_of_var = cur_method;
         cur_var.class_of_var = aa.name;
         cur_var.is_parameter = true;
         variable_details.add(cur_var);

         return _ret;
    }
    else
    {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
    }
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      // R _ret=null;
      if(parse_no==2)
      {
         rettAttr type_name = (rettAttr)(n.f0.accept(this, argu)); 
         return (R)type_name;
      }
      else
      {
         String type = (String)n.f0.accept(this,argu);
         return (R)type;
      }
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(parse_no==2)
      {
         rettAttr ret_obj = new rettAttr();
        ret_obj.type = "array";
        _ret = (R)ret_obj;
      }
      else
      {
        _ret = (R)"array";
      }
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(parse_no==2)
      {
         rettAttr ret_obj = new rettAttr();
        ret_obj.type = "boolean";
        _ret = (R)ret_obj;
      }
      else
      {
        _ret = (R)"boolean";
      }
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
     if(parse_no==2)
      {
         rettAttr ret_obj = new rettAttr();
        ret_obj.type = "int";
        _ret = (R)ret_obj;
      }
      else
      {
        _ret = (R)"int";
      }
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      if(parse_no == 2)
    {  
     
        rettAttr lhs = (rettAttr)n.f0.accept(this, argu);
        String var_name = lhs.value;
      //   System.out.println(var_name);
         n.f1.accept(this, argu);
         rettAttr rhs = (rettAttr)n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         int done =0;
          for(int i=0;i<method_details.size();i++)
         {
            MethodDetails element = method_details.get(i);
            if(element.name == mymethod && element.class_of_method == myclass)
            {
               if(element.temp_mapping_par.containsKey(var_name))
               {
                  String temp = element.temp_mapping_par.get(var_name);
                  System.out.println("MOVE "+temp+" "+rhs.temp);
                  done=1;
               }

              else if(element.temp_mapping_var.containsKey(var_name))
               {
                  String temp = element.temp_mapping_var.get(var_name);
                  System.out.println("MOVE "+temp+" "+rhs.temp);
                  done=1;
               }
              break;
            }
         }
         // System.out.println(myclass);
         if(myclass!=null&&done!=1)
        {
         // System.out.println("uru");
          for(int i=0;i<c_eq_classes.get(myclass).fields.size();i++)
         {
            
            String field_name = c_eq_classes.get(myclass).fields.get(i);
            String cor_class = c_eq_classes.get(myclass).cor_classes.get(i);
            if(field_name == var_name && cor_class == myclass)
            {
               Integer offset = c_eq_classes.get(myclass).field_offset.get(i);
               // String t1 = genTemp();
               System.out.println("HSTORE "+"TEMP 0 "+(offset*4)+" "+rhs.temp);
               break;
             
            }
            else if (field_name == var_name)
            {
               Integer offset = c_eq_classes.get(myclass).field_offset.get(i);
                System.out.println("HSTORE "+"TEMP 0 "+(offset*4)+" "+rhs.temp); 
                break;
            }

         }
       }

         lhs.type = rhs.type;
         return _ret;
   }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      if(parse_no==2)
     { 
         rettAttr id = (rettAttr)n.f0.accept(this, argu); 
         //temp has currently stored properly temp+ offset+1 * 4, store if class variable then load it into a temp and do the same
         String var_name = id.value;
         // String addr = id.temp;
         n.f1.accept(this, argu);
         rettAttr off = (rettAttr)n.f2.accept(this, argu);
         String off_temp = off.temp;
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         rettAttr expr = (rettAttr)n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         int done =0;
         for(int i=0;i<method_details.size();i++)
         {
            MethodDetails element = method_details.get(i);
            if(element.name == mymethod && element.class_of_method == myclass)
            {
               if(element.temp_mapping_par.containsKey(var_name))
               {
                  String temp = element.temp_mapping_par.get(var_name);
                  // System.out.println("MOVE "+temp+" "+rhs.temp);
                  String t1 = genTemp();
                  System.out.println("MOVE "+t1+" "+"PLUS "+off_temp+" 1");
                  String t2 = genTemp();
                  System.out.println("MOVE "+t2+" "+"TIMES "+t1+" 4");
                  String t3 = genTemp();
                  System.out.println("MOVE "+t3+" "+"PLUS "+temp+" "+t2);
                  System.out.println("HSTORE "+t3 + " "+0+" "+expr.temp);
                  done=1;
               }

              else if(element.temp_mapping_var.containsKey(var_name))
               {
                  String temp = element.temp_mapping_var.get(var_name);
                  // System.out.println("MOVE "+temp+" "+rhs.temp);
                  String t1 = genTemp();
                  System.out.println("MOVE "+t1+" "+"PLUS "+off_temp+" 1");
                  String t2 = genTemp();
                  System.out.println("MOVE "+t2+" "+"TIMES "+t1+" 4");
                  String t3 = genTemp();
                  System.out.println("MOVE "+t3+" "+"PLUS "+temp+" "+t2);
                  System.out.println("HSTORE "+t3 + " "+0+" "+expr.temp);
                  done=1;
               }
              break;
            }
         }

         if(myclass!=null && done==0)
         {
         for(int i=0;i<c_eq_classes.get(myclass).fields.size();i++)
         {
            
            String field_name = c_eq_classes.get(myclass).fields.get(i);
            String cor_class = c_eq_classes.get(myclass).cor_classes.get(i);
            if(field_name == var_name && cor_class == myclass)
            {
               Integer offset = c_eq_classes.get(myclass).field_offset.get(i);
               String t5 = genTemp();
               System.out.println("HLOAD "+t5+" TEMP 0 "+(offset*4));

               String t1 = genTemp();
               System.out.println("MOVE "+t1+" "+"PLUS "+off_temp+" 1");
               String t2 = genTemp();
               System.out.println("MOVE "+t2+" "+"TIMES "+t1+" 4");
               String t3 = genTemp();
               System.out.println("MOVE "+t3+" "+"PLUS "+t5+" "+t2);
               System.out.println("HSTORE "+t3 + " "+0+" "+expr.temp);

               break;
            }
            else if (field_name == var_name)
            {
               Integer offset = c_eq_classes.get(myclass).field_offset.get(i);
               String t5 = genTemp();
               System.out.println("HLOAD "+t5+" TEMP 0 "+(offset*4));

               String t1 = genTemp();
               System.out.println("MOVE "+t1+" "+"PLUS "+off_temp+" 1");
               String t2 = genTemp();
               System.out.println("MOVE "+t2+" "+"TIMES "+t1+" 4");
               String t3 = genTemp();
               System.out.println("MOVE "+t3+" "+"PLUS "+t5+" "+t2);
               System.out.println("HSTORE "+t3 + " "+0+" "+expr.temp);
               break;
            }
         }
         }
         return _ret;
     }
     else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      if(parse_no==2)
     { 
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
        rettAttr expr = (rettAttr) n.f2.accept(this, argu);
        String l1 = genLabel();
        
         n.f3.accept(this, argu);
         System.out.println("CJUMP "+expr.temp+" "+l1);
         n.f4.accept(this, argu);
         System.out.println(l1);
         System.out.println("NOOP");
         
         return _ret;
     }
   
   else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         
         return _ret;
      }
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      if(parse_no==2)
     {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         rettAttr expr = (rettAttr)n.f2.accept(this, argu);
         
         n.f3.accept(this, argu);
         String l1 = genLabel();
        
         String l2 = genLabel();
         System.out.println("CJUMP "+expr.temp+" "+l1);
         n.f4.accept(this, argu);
         System.out.println("JUMP "+l2);
         System.out.println(l1);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         System.out.println(l2);
         System.out.println("NOOP");
         return _ret;
     }
     else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         String l1 = genLabel();
         String l2 = genLabel();
         n.f0.accept(this, argu);
         // System.out.println(l1);
         n.f1.accept(this, argu);
         System.out.println(l2);
        rettAttr expr = (rettAttr) n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         System.out.println("CJUMP "+expr.temp+" "+l1);
         n.f4.accept(this, argu);
         System.out.println("JUMP "+l2);
         System.out.println(l1);
         System.out.println("NOOP");
       
         return _ret;
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
       
         return _ret;
      }
   }

   /**
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public R visit(DoStatement n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         String l1 = genLabel();
         String l2 = genLabel();
         n.f0.accept(this, argu);
         System.out.println(l1);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         rettAttr expr = (rettAttr)n.f4.accept(this, argu);
         System.out.println("CJUMP "+expr.temp+" "+l2);
         System.out.println("JUMP "+l1);
         System.out.println(l2);
         System.out.println("NOOP");
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
          n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         rettAttr expr = (rettAttr)n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         System.out.println("PRINT "+expr.temp);
         return _ret;
     }
     else
      {
         
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> OrExpression()  
    }
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength() *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      in_expr = 1;
      rettAttr ret_obj= (rettAttr)n.f0.accept(this, argu);
      rettAttr jj = new rettAttr();
      jj = ret_obj;
      
      in_expr =0;
      return (R)jj;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) 
   {

         R _ret=null;
         if(parse_no==2)
         {  
            String l1 = genLabel();
            String l2 = genLabel();
            String l3 = genLabel();
            String t1 = genTemp();
            rettAttr first = (rettAttr) n.f0.accept(this, argu);
            System.out.println("CJUMP "+first.temp+" "+l1);
            n.f1.accept(this, argu);
            rettAttr second = (rettAttr) n.f2.accept(this, argu);
            System.out.println("CJUMP "+second.temp+" "+l1);
            System.out.println("JUMP "+l2);
            System.out.println(l1);
            System.out.println("MOVE "+t1+" "+0);
            System.out.println("JUMP "+l3);
            System.out.println(l2);
            System.out.println("MOVE "+t1+" "+1);
            System.out.println(l3);
            System.out.println("NOOP");
           rettAttr ret_obj = new rettAttr();
           ret_obj.temp = t1;
            return (R)ret_obj;
         }
         else
         {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            return _ret;
         }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
            String l1 = genLabel();
            String l2 = genLabel();
            String l3 = genLabel();
            String t1 = genTemp();
            rettAttr first = (rettAttr) n.f0.accept(this, argu);
            System.out.println("CJUMP "+first.temp+" "+l1);
            System.out.println("MOVE "+t1+" "+1);
            System.out.println("JUMP "+l2);
            System.out.println(l1);
            n.f1.accept(this, argu);
            rettAttr second = (rettAttr) n.f2.accept(this, argu);
            System.out.println("CJUMP "+second.temp+" "+l3);
            System.out.println("MOVE "+t1+" "+1);
            System.out.println("JUMP "+l2);
            System.out.println(l3);
            System.out.println("MOVE "+t1+" "+0);
            System.out.println("JUMP "+l2);
            System.out.println(l2);
            System.out.println("NOOP");
            // System.out.println("MOVE "+t1+" "+1);
            // String t2 = genTemp();
            // System.out.println("MOVE "+t2+" MINUS "+t1+" "+first.temp);

            // String t3 = genTemp();
            // System.out.println("MOVE "+t3+" "+1);
            // String t4 = genTemp();
            // System.out.println("MOVE "+t4+" MINUS "+t3+" "+second.temp);
            
            // String t5 = genTemp();
            // System.out.println("MOVE "+t5+" "+"TIMES "+t2+" "+t4);

            // String t6 = genTemp();
            // System.out.println("MOVE "+t6+" "+1);
            // String t7 = genTemp();
            // System.out.println("MOVE "+t7+" MINUS "+t6+" "+t5);
             

            rettAttr ret_obj = new rettAttr();
            ret_obj.temp = t1;
            return (R)ret_obj;
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      
      R _ret=null;
      if(parse_no==2)
     { 
         rettAttr first = (rettAttr) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         rettAttr second = (rettAttr) n.f2.accept(this, argu);
         String t1 = genTemp();
         System.out.println("MOVE "+t1+" "+"LE "+first.temp+" "+second.temp);
         rettAttr ret_obj = new rettAttr();
         ret_obj.temp = t1;

         return (R)ret_obj;
      
     }
     else
     {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
     }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {  
         rettAttr first = (rettAttr) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         rettAttr second = (rettAttr) n.f2.accept(this, argu);
         String t1 = genTemp();
         System.out.println("MOVE "+t1+" "+"NE "+first.temp+" "+second.temp);
         rettAttr ret_obj = new rettAttr();
         ret_obj.temp = t1;

         return (R)ret_obj;
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(AddExpression n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         rettAttr first = (rettAttr) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         rettAttr second = (rettAttr) n.f2.accept(this, argu);
         String t1 = genTemp();
         System.out.println("MOVE "+t1+" "+"PLUS "+first.temp+" "+second.temp);
         rettAttr ret_obj = new rettAttr();
         ret_obj.temp = t1;

         return (R)ret_obj;
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      
      
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
          rettAttr first = (rettAttr) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         rettAttr second = (rettAttr) n.f2.accept(this, argu);
         String t1 = genTemp();
         System.out.println("MOVE "+t1+" "+"MINUS "+first.temp+" "+second.temp);
         rettAttr ret_obj = new rettAttr();
         ret_obj.temp = t1;

         return (R)ret_obj;
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         
          rettAttr first = (rettAttr) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         rettAttr second = (rettAttr) n.f2.accept(this, argu);
         String t1 = genTemp();
         System.out.println("MOVE "+t1+" "+"TIMES "+first.temp+" "+second.temp);
         rettAttr ret_obj = new rettAttr();
         ret_obj.temp = t1;

         return (R)ret_obj;
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
     R _ret=null;
      if(parse_no==2)
      {
          rettAttr first = (rettAttr) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         rettAttr second = (rettAttr) n.f2.accept(this, argu);
         String t1 = genTemp();
         System.out.println("MOVE "+t1+" "+"DIV "+first.temp+" "+second.temp);
         rettAttr ret_obj = new rettAttr();
         ret_obj.temp = t1;

         return (R)ret_obj;
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         rettAttr arr = (rettAttr) n.f0.accept(this, argu);
         String arr_addr = arr.temp;
         n.f1.accept(this, argu);
         rettAttr index = (rettAttr)n.f2.accept(this, argu);
         String arr_index = index.temp;
         n.f3.accept(this, argu);

         String t1 = genTemp();
         System.out.println("MOVE "+t1+" "+1);
         String t2 = genTemp();
         System.out.println("MOVE "+t2+" "+"PLUS "+arr_index+" "+t1);
         String t3 = genTemp();
         System.out.println("MOVE "+t3+" "+"TIMES "+t2+" "+4);
         String t4 = genTemp();
         System.out.println("MOVE "+t4+" "+"PLUS "+arr_addr+" "+t3);
         String t5 = genTemp();
         System.out.println("HLOAD "+t5+" "+t4+" "+0);

         rettAttr ret_obj = new rettAttr();
         ret_obj.temp = t5;

         return (R)ret_obj; 
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         return _ret;  
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
     R _ret=null;
      if(parse_no==2)
      {
         rettAttr arr = (rettAttr) n.f0.accept(this, argu);
         String arr_addr = arr.temp;
         String t1 = genTemp();
         System.out.println("HLOAD "+t1+" "+arr_addr+" "+0);
      
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         rettAttr ret_obj = new rettAttr();
         ret_obj.temp = t1;
         return (R)ret_obj;  
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         
         return _ret;  
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      
      R _ret=null;
      if(parse_no==2)
      {
         rettAttr obj_type = (rettAttr) n.f0.accept(this, argu);
      
         n.f1.accept(this, argu);
         rettAttr method = (rettAttr) n.f2.accept(this, argu);
         String method_name = method.value;
         // System.out.println(method_name);
         MethodDetails element = new MethodDetails();
      
         String cur_class = obj_type.type;
         
         // System.out.println(obj_type.temp+" "+obj_type.type);
         String t1 = genTemp();
         System.out.println("MOVE "+t1+" "+obj_type.temp);
         String t2 = genTemp();
         System.out.println("HLOAD "+t2+" "+t1+" "+0);
         Integer offset = c_eq_classes.get(cur_class).vtable.get(method_name).offset;
         String t3 = genTemp();
         System.out.println("HLOAD "+t3+" "+t2 +" "+ (4*offset));
         n.f3.accept(this, argu);
         Vector<String> param_list = new Vector<>();
         n.f4.accept(this, (A)param_list);
         // System.out.println(param_list);
         String t4 = genTemp();
         System.out.print("MOVE "+t4+" "+"CALL "+t3+" "+"( "+obj_type.temp+" ");
         for(int i=0;i<param_list.size();i++)
         {
            System.out.print(param_list.get(i)+" ");
         }
         System.out.println(")");
         n.f5.accept(this, argu);
         rettAttr ret_obj = new rettAttr();
         ret_obj.temp = t4;
         for(int i=0;i<method_details.size();i++)
         {
            element = method_details.get(i);
            // System.out.println(element.return_type+"yoyo"+obj_type.type);
            if(element.name == method_name && element.class_of_method == obj_type.type)
            {
               // System.out.println(element.return_type);
               ret_obj.type = element.return_type;
               break;
            }

         }
         // System.out.println("Break your head..");
         // System.out.println(ret_obj.type +" omg "+ ret_obj.temp);
         return (R)ret_obj;
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);

         return _ret;
      }
      
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         Vector<String> exp_temps = (Vector<String>)argu;
         
        rettAttr expr = (rettAttr) n.f0.accept(this, argu);
        exp_temps.add(expr.temp);
         n.f1.accept(this, (A)exp_temps);
         return _ret;
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
      
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      if(parse_no==2)
     { 
       Vector<String> vv = (Vector<String>)argu;
       n.f0.accept(this, argu);
       rettAttr exp_type = (rettAttr) n.f1.accept(this, argu);
       vv.add(exp_type.temp);
       return _ret;
     }
     else
     {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
     }
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
     
         if(parse_no==2)
         {
            in_prim = 1;
            rettAttr ret_obj = new rettAttr();
            ret_obj = (rettAttr)n.f0.accept(this, argu);
            // System.out.println(ret_obj.temp + "   pp  "+ret_obj.type);
            in_prim = 0;
            return (R)ret_obj; 
         }
         else
         {
            n.f0.accept(this, argu);
            return _ret;
         }
      }

      
   

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {

      R _ret=null;
      if(parse_no==2)
      {
         n.f0.accept(this, argu);
         String local_temp = genTemp();
         System.out.println("MOVE " + local_temp + " "+ n.f0.tokenImage);
         rettAttr element = new rettAttr();
         element.temp = local_temp;
         element.value = n.f0.tokenImage;
         return (R)element;
      }
      else
      {
          n.f0.accept(this, argu);
         return _ret;
      }

   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
          n.f0.accept(this, argu);
            String local_temp = genTemp();
            System.out.println("MOVE " + local_temp + " "+ 1);
            rettAttr element = new rettAttr();
            element.temp = local_temp;
            element.value = "1";
            return (R)element;
      }
      else
      {
          n.f0.accept(this, argu);
        return _ret;
      }
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
     if(parse_no==2)
      {
          n.f0.accept(this, argu);
          String local_temp = genTemp();
         System.out.println("MOVE " + local_temp + " "+ 0);
         rettAttr element = new rettAttr();
         element.temp = local_temp;
         element.value = "0";
         return (R)element;
      }
      else
      {
          n.f0.accept(this, argu);
        return _ret;
      }
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) { //need to
     /// R _ret=null;
      if(parse_no==1)
     {
       n.f0.accept(this, argu);
      return (R)n.f0.tokenImage;
     }
     else 
     {
       
         n.f0.accept(this, argu);
         rettAttr ret_obj = new rettAttr();
         ret_obj.value = n.f0.tokenImage;
         // System.out.println("debugging ..."+ret_obj.value);
         for(int i=0;i<method_details.size();i++)
         {
            MethodDetails element = method_details.get(i);
            if(element.name == mymethod && element.class_of_method == myclass)
            {
               if(element.temp_mapping_par.containsKey(n.f0.tokenImage))
               {
                  ret_obj.temp = element.temp_mapping_par.get(n.f0.tokenImage);
                  for(int j=0; j<element.parameters.size();j++)
                  {
                     String var_name = element.parameters.get(j);
                     if(var_name==n.f0.tokenImage)
                     {
                        String type = element.parameter_types.get(j);
                        ret_obj.type = type;
                        break;
                     }
                  }
                  return (R)ret_obj;
               }


              else if(element.temp_mapping_var.containsKey(n.f0.tokenImage))
               {
                  ret_obj.temp = element.temp_mapping_var.get(n.f0.tokenImage);
                  for(int j=0; j<element.variables.size();j++)
                  {
                     String var_name = element.variables.get(j);
                     if(var_name==n.f0.tokenImage)
                     {
                        String type = element.variable_types.get(j);
                        ret_obj.type = type;
                        break;
                     }
                  }
                  return (R)ret_obj;
               }
               
            }
         }
         // System.out.println(myclass);
         if(myclass!=null && (in_expr==1||in_prim==1))
        {
         // System.out.println("uru");
         // System.out.println(in_expr);
          for(int i=0;i<c_eq_classes.get(myclass).fields.size();i++)
         {
            
            String field_name = c_eq_classes.get(myclass).fields.get(i);
            String cor_class = c_eq_classes.get(myclass).cor_classes.get(i);
            if(field_name == n.f0.tokenImage && cor_class == myclass)
            {
               Integer offset = c_eq_classes.get(myclass).field_offset.get(i);
               String t1 = genTemp();
               System.out.println("HLOAD "+t1+" TEMP 0 "+(offset*4));
               
               for(int j=0; j<class_details.get(myclass).variables.size();j++)
               {
                  String element = class_details.get(myclass).variables.get(j);
                  if(element == field_name)
                  {
                     ret_obj.type = class_details.get(myclass).variable_types.get(j);
                  }
               }
               ret_obj.temp = t1;
               return (R)ret_obj;
            }
            else if (field_name == n.f0.tokenImage)
            {
               Integer offset = c_eq_classes.get(myclass).field_offset.get(i);
               String t1 = genTemp();
               System.out.println("HLOAD "+t1+" TEMP 0 "+(offset*4));
                
               for(int j=0; j<class_details.get(cor_class).variables.size();j++)
               {
                  String element = class_details.get(cor_class).variables.get(j);
                  if(element == field_name)
                  {
                     ret_obj.type = class_details.get(cor_class).variable_types.get(j);
                  }
               }

               ret_obj.temp = t1;
               return (R)ret_obj;    
            }
         }
       }
         
         return (R)ret_obj;
      

     }
      
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      
      if(parse_no==2)
     { 
         n.f0.accept(this, argu);
         rettAttr ret_obj = new rettAttr();
         ret_obj.temp = "TEMP 0";
         ret_obj.type = myclass;
         return (R)ret_obj;
     }
     else
     {
         n.f0.accept(this, argu);
         return _ret;
     }
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         rettAttr obj = (rettAttr)n.f3.accept(this, argu);
         String cur_temp = obj.temp;
         String t1 = genTemp();
         System.out.println("MOVE "+t1+" "+"1");
         String t2 = genTemp();
         System.out.println("MOVE "+t2+" "+"PLUS "+cur_temp+" "+t1);
         String t3 = genTemp();
         System.out.println("MOVE "+t3+" "+"4");
         String t4 = genTemp();
         System.out.println("MOVE "+t4+"TIMES "+t2+" "+t3);
         String t5 = genTemp();
         System.out.println("MOVE "+t5+" "+"HALLOCATE "+t4);
         System.out.println("HSTORE "+t5+" "+0+" "+cur_temp);
         rettAttr ret_obj = new rettAttr();

         String t6 = genTemp();
         System.out.println("MOVE "+t6+" 0");
         String t7 = genTemp();
         System.out.println("MOVE "+t7 +cur_temp);
         String t8 = genTemp();
         System.out.println("MOVE "+t8+" "+1);
         String t9 = genTemp();
         String t10 = genTemp();
         String t11 = genTemp();

         String l1 = genLabel();
         String l2 = genLabel();
    
         System.out.println(l1);
         System.out.println("MOVE "+t9+" "+"LE "+t8+" "+t7);
         System.out.println("CJUMP "+t9 + " "+l2);
         System.out.println("MOVE "+t10+" "+"TIMES "+t8+" "+4);
         System.out.println("MOVE "+t11+" "+"PLUS "+t5+" "+t10);
         System.out.println("HSTORE "+t11+" "+0+" "+t6);
         System.out.println("MOVE "+t8+" PLUS "+t8+" "+1);
         System.out.println("JUMP "+l1);
         System.out.println(l2);
         System.out.println("NOOP");


         ret_obj.temp = t5;
         n.f4.accept(this, argu);
         return (R)ret_obj;
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;

      }
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         // System.out.println("reached..");
         n.f0.accept(this, argu);
         rettAttr meg = (rettAttr)n.f1.accept(this, argu);
         // System.out.println("MEga");
         // System.out.println(meg.temp);
         // System.out.println(meg.value);
         String our_class = meg.value;
         int table_size = c_eq_classes.get(our_class).fields.size()+1;
        
         String t1 = genTemp();
         int v_table_size = c_eq_classes.get(our_class).vtable.size();
         System.out.println("MOVE "+t1+" "+(v_table_size*4));
         String t2 = genTemp();
         System.out.println("MOVE "+ t2 + " "+"HALLOCATE "+t1);
         String t3 = genTemp();
         System.out.println("MOVE "+t3+" "+(table_size*4));
         String t4 = genTemp();
         System.out.println("MOVE "+t4+" "+"HALLOCATE "+t3);
          
          for(Map.Entry<String, method_offset>entrier : c_eq_classes.get(our_class).vtable.entrySet())
            {
               String keyr = entrier.getKey();
               method_offset valuer = entrier.getValue();
               String class_name = valuer.class_name;
               Integer offset = valuer.offset;
               String mera_temp = genTemp();
               System.out.println("MOVE "+ mera_temp+" "+class_name+"_"+keyr);
               System.out.println("HSTORE "+t2+" "+(offset*4)+" "+mera_temp);  
            }
         System.out.println("HSTORE "+t4+" "+0+" "+t2);
         String t7 = genTemp();
         System.out.println("MOVE "+t7+" "+0);
         int size = c_eq_classes.get(our_class).fields.size();
         for(int i =1;i<=size;i++)
         {
            System.out.println("HSTORE "+t4+" "+(i*4)+" "+t7);
         }
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         rettAttr ret_obj = new rettAttr();
         ret_obj.temp = t4;
         ret_obj.value = meg.value;
         ret_obj.type = meg.value;
       return (R)ret_obj;
     }
     else
     {
       n.f0.accept(this, argu);
       n.f1.accept(this, argu);
       n.f2.accept(this, argu);
       n.f3.accept(this, argu);
        
       return _ret;
     }
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
     if(parse_no==2)
     {
         n.f0.accept(this, argu);
         rettAttr expr = (rettAttr)n.f1.accept(this, argu);
         String cur_temp = expr.temp;
         String t1 = genTemp();
         System.out.println("MOVE "+t1+" "+1);
         String t2 = genTemp();
         System.out.println("MOVE "+t2+" "+"MINUS "+t1+" "+cur_temp);
         rettAttr ret_obj = new rettAttr();
         ret_obj.temp = t2;
         return (R)ret_obj;
     }
     else
     {
       n.f0.accept(this, argu);
       n.f1.accept(this, argu);
       return _ret;
     }
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
     if(parse_no==2 )
     {
       n.f0.accept(this, argu);
     rettAttr elem = (rettAttr)  n.f1.accept(this, argu);
     String t1 = genTemp();
      System.out.println("MOVE "+t1 + " "+ elem.temp);
      rettAttr ret_obj = new rettAttr();
      n.f2.accept(this, argu);
      ret_obj.temp = t1;
      ret_obj.type = elem.type;
      return (R)ret_obj;
     }
     else
     { 
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
     }
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}

