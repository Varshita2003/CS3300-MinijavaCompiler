//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
class ClassDetails {
   public String name;
   public Vector<String> method_names = new Vector<>();
   public Vector<String> variables = new Vector<>();
   public Vector<String> variable_types = new Vector<>();
   public boolean extended;
   public String extended_class_name;
}

class MethodDetails
{
   public String name;
   public String class_of_method;
   public Vector<String> variables = new Vector<>();
   public Vector<String> variable_types = new Vector<>();
   public Vector<String> parameter_types = new Vector<>();
   public Vector<String> parameters = new Vector<>();
   public String return_type;
}
class VariableDetails
{
   public String var_name;
   public String class_of_var;
   public String method_of_var;
   public String type_of_var;
   public boolean is_parameter;

}
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
  
   Vector<String> par_list = new Vector<>();
   public int parse_no = 1;
   public int inclass = 1;
   public int  is_main = 0;
   public String myclass;
   public String mymethod;
   HashMap<String, ClassDetails> class_details = new HashMap<>();
   Vector<MethodDetails> method_details = new Vector<>();
   Vector<VariableDetails> variable_details = new Vector<>();
   public String gettypescope( String variable , String className , String methodName)
   {
     
      for(int i=0 ;i<method_details.size(); i++)
      {
         MethodDetails mm = method_details.get(i);
         if(mm.name == methodName && mm.class_of_method == className)
         {
            if(mm.variables.contains(variable))
            {
               for(int j=0; j<mm.variables.size() ;j++)
               {
                   String elem = mm.variables.get(j);
                   if(elem == variable)
                   {
                     return mm.variable_types.get(j);
                   }

               }
               
            }
            if(mm.parameters.contains(variable))
            {
              for(int j=0; j<mm.parameters.size() ;j++)
               {
                   String elem = mm.parameters.get(j);
                   if(elem == variable)
                   {
                     return mm.parameter_types.get(j);
                   }

               }
            }
         }
      }
      
      if(class_details.get(className).variables.contains(variable))
      {
         for(int k = 0; k< class_details.get(className).variables.size(); k++)
         {
            String elem = class_details.get(className).variables.get(k) ;
            if(elem == variable)
            {
               return class_details.get(className).variable_types.get(k);
            }
         }
      }
      if(class_details.get(className).extended == true)
      {
         String cur_class = className;
         while(true)
         {
           String extended_class = class_details.get(cur_class).extended_class_name;
         //   System.out.println(extended_class+"hhyyy");
           if(class_details.get(extended_class).variables.contains(variable))
           {
              for(int k = 0; k< class_details.get(extended_class).variables.size(); k++)
               {
                  String elem = class_details.get(extended_class).variables.get(k) ;
                  if(elem == variable)
                  {
                     return class_details.get(extended_class).variable_types.get(k);
                  }
               }
           }
           if(!class_details.get(extended_class).extended)
           {
           
            break;
           }
           cur_class = extended_class;
         }
      }
      return "not found";
   }

   boolean matches(String a , String b)
   {
      if(a == b)
      {
         return true;
      }
      if(class_details.get(a) == null || class_details.get(b) == null)
      {
         return false;
      }
      if(class_details.get(b).extended == false)
      {
         return false;
      }
      String parentClass = class_details.get(b).extended_class_name;
      while(true)
      {
         if(a==parentClass) return true;
         if(class_details.get(parentClass).extended == true)
         {
            parentClass = class_details.get(parentClass).extended_class_name;
         }
         else
         {
            break;
         }
      }
      return false;
   }

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      parse_no = (int)argu;

      if(parse_no==1)
     { 
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      for (Map.Entry<String, ClassDetails> entry : class_details.entrySet())
       {
      String key = entry.getKey();
      ClassDetails value = entry.getValue();
      if(value.extended==true)
      {
         if(!class_details.containsKey(value.extended_class_name))
         { 
            System.out.println("Symbol not found");
            System.exit(0);
         }
      }
   
      }

      for (Map.Entry<String, ClassDetails> entry : class_details.entrySet())
       {
      String key = entry.getKey();
      ClassDetails value = entry.getValue();
      if(value.extended==true)
      {
         Vector<String> extended_chain = new Vector<>();
         String cur_class = key;
         while(true)
         {
            String extended_class = class_details.get(cur_class).extended_class_name;
            if(extended_chain.contains(extended_class))
            {
               System.out.println("Type error");
               System.exit(0);
            }
            extended_chain.add(extended_class);
            cur_class = extended_class;
            if(class_details.get(cur_class).extended == false)
            break;

         }
      }
      
      }
      

      return _ret;
   }
   else
   {
 
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;

   }

   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      if(parse_no==1)
      {
         n.f0.accept(this, argu);
         String main_class_name = (String)n.f1.accept(this,argu);
         ClassDetails main_class_details = new ClassDetails();
         main_class_details.name = main_class_name;
         class_details.put(main_class_name,main_class_details);
         argu = (A)main_class_details;
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);

         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         
         n.f14.accept(this, argu);
         
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);

         return _ret;
      }
      else
      {
         n.f0.accept(this, argu);
         String main = (String) n.f1.accept(this, argu);

         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu); 
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
      
         return _ret;

      }
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      if(parse_no==1)
      {
         n.f0.accept(this, argu);
         String class_name = (String)n.f1.accept(this, argu);
         ClassDetails cur_class = new ClassDetails();
         cur_class.name = class_name;
         if(!class_details.containsKey(class_name))
         class_details.put(class_name,cur_class);
         else
         {
            System.out.println("Type error");
            System.exit(0);
         }
         argu = (A)cur_class;
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         return _ret;
     }
     else
     {
         inclass = 1;
         n.f0.accept(this, argu);
         String class_name = (String) n.f1.accept(this, argu);
         ClassDetails curclassdeDetails = class_details.get(class_name);
         argu = (A)curclassdeDetails;
         myclass = class_name;
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         return _ret;
     }
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      if(parse_no==1)
     {
         n.f0.accept(this, argu);
         String class_name = (String)n.f1.accept(this, argu);
         n.f2.accept(this, argu);

         String parent_class = (String) n.f3.accept(this, argu);
         ClassDetails cur_class = new ClassDetails();
         cur_class.name = class_name;
         cur_class.extended_class_name = parent_class;
         cur_class.extended = true;
         if(!class_details.containsKey(class_name))
         class_details.put(class_name,cur_class);
         else
         {
            System.out.println("Type error");
            System.exit(0);
         }
         argu = (A) cur_class;
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         return _ret;
     }
     else
     {
         inclass =1;
         n.f0.accept(this, argu);
         String class_name = (String) n.f1.accept(this, argu);
         ClassDetails curclassdeDetails = class_details.get(class_name);
         argu = (A)curclassdeDetails;
         myclass = class_name;
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         return _ret;
     }
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      if (parse_no==1)
      {
         String variable_type = (String) n.f0.accept(this, argu);
         String variable_name = (String) n.f1.accept(this, argu);
         ClassDetails Argu = (ClassDetails) argu;
         if(Argu.method_names.size()==0)
         {
            Argu.variables.add(variable_name);
            Argu.variable_types.add(variable_type);
         }

            VariableDetails cur_var = new VariableDetails();
            
            int length = Argu.method_names.size();
            if(length==0)
            {
                  cur_var.var_name = variable_name;
                  cur_var.type_of_var = variable_type;
                  cur_var.class_of_var = Argu.name;
                  cur_var.is_parameter = false;
                  for (int i = 0; i < variable_details.size(); i++)
                  {
                     VariableDetails element = variable_details.get(i);
                  
                        if(element.var_name==variable_name && element.class_of_var == Argu.name )
                        {
                           System.out.println("Type error");
                           System.exit(0);
                        }
                     }
                  variable_details.add(cur_var);
            }
            else
            {
                  
                  cur_var.var_name = variable_name;
                  cur_var.type_of_var = variable_type;
                  cur_var.method_of_var = Argu.method_names.get(length-1);
                  cur_var.class_of_var = Argu.name;
                  cur_var.is_parameter = false;
                  for (int i = 0; i < variable_details.size(); i++)
                  {
                     VariableDetails element = variable_details.get(i);
                     
                     if(element.var_name==variable_name&& element.class_of_var == Argu.name && element.method_of_var ==cur_var.method_of_var)
                     {
                        System.out.println("Type error");
                        System.exit(0);
                     }
                  }
                  variable_details.add(cur_var);

                  for(int i=0; i<method_details.size();i++)
                  {
                     MethodDetails m = method_details.get(i);
                     if(m.class_of_method== Argu.name && m.name == Argu.method_names.get(length-1))
                     {
                        m.variables.add(variable_name);
                        m.variable_types.add(variable_type);
                     }
                  }
            }
         
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         String typr = (String)n.f0.accept(this, argu);
         
         if(typr!="int"&&typr!="array" && typr != "boolean" && !class_details.containsKey(typr))
         {
            System.out.println("Symbol not found");
            System.exit(0);
         }
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      if(parse_no==1)
      {
         n.f0.accept(this, argu);
         String return_type = (String)n.f1.accept(this, argu);
         String method = (String) n.f2.accept(this, argu);
         
         ClassDetails Argu = (ClassDetails) argu;
         //  if( Argu.method_names)
         if((Argu.method_names).contains(method))
         {
            System.out.println("Type error");
            System.exit(0);
         }
         Argu.method_names.add(method);
        
         MethodDetails cur_method = new MethodDetails();
         cur_method.name = method;
         cur_method.class_of_method = Argu.name;
         cur_method.return_type = return_type;
      
         method_details.add(cur_method);
         argu = (A)Argu ;
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         return _ret;
     }
     else
     {
         inclass = 2;
         ClassDetails Argu = (ClassDetails) argu;
         n.f0.accept(this, argu);
         String ret_type = (String) n.f1.accept(this, argu);
         String method = (String) n.f2.accept(this, argu);
         mymethod = method;
         
         if(class_details.get(Argu.name).extended)
         {
            String cur_class_name = Argu.name;
            while(true)
            {
               if(class_details.get(cur_class_name).method_names.contains(method))
               {
                  for(int i=0; i<method_details.size(); i++)
                  {
                     MethodDetails mm = method_details.get(i);
                     if(mm.name == method && mm.class_of_method == cur_class_name)
                     {
                        for(int j =0 ;j < method_details.size() ; j++)
                        {
                           MethodDetails mu = method_details.get(j);
                           if(mu.name == method && mu.class_of_method == Argu.name )
                           {
                              if(mu.parameter_types.size() != mm.parameter_types.size())
                              {
                                 System.out.println("Type error");
                                 System.exit(0);
                              }
                              for(int k =0;k<mu.parameter_types.size();k++)
                              {
                                 String type1 = mm.parameter_types.get(k);
                                 String type2 = mu.parameter_types.get(k);
                                 if(type1!=type2)
                                 {
                                    System.out.println("Type error");
                                    System.exit(0);

                                 }
                              }
                              if(!matches(mm.return_type, mu.return_type))
                              {
                                 System.out.println("Type error");
                                    System.exit(0);
                              }
                           }
                        }
                     }
                  }
               }
               if(!class_details.get(cur_class_name).extended)
               break;
               cur_class_name = class_details.get(cur_class_name).extended_class_name;
            }
         }

         for(int i =0 ;i<method_details.size() ; i++)
         {
            MethodDetails element = method_details.get(i);
            if(element.name == method && element.class_of_method==Argu.name)
            {
               argu = (A)element;
               break;
            }
         }
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         String got_ret_type = (String) n.f10.accept(this, argu);
       
          if(ret_type!="int" && ret_type!="boolean" && ret_type!="array" && !class_details.containsKey(ret_type) )
         {
            System.out.println("Symbol not found");
            System.exit(0);
         }
         if(!matches(ret_type, got_ret_type))
         {
            System.out.println("Type error");
            System.exit(0);
         }
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         return _ret;

     }
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      if(parse_no==1)
      {
         String para_type = (String)n.f0.accept(this, argu);
         String para = (String)n.f1.accept(this, argu);
         ClassDetails aa = (ClassDetails)argu;

         String cur_method = aa.method_names.get(aa.method_names.size()-1);

         for (int i = 0; i < method_details.size(); i++) 
         {
            MethodDetails element = method_details.get(i);
            if(element.class_of_method == aa.name&& element.name == cur_method)
            {
               element.parameter_types.add(para_type);
               element.parameters.add(para);
               break;
            }
         }
         VariableDetails cur_var = new VariableDetails();
         cur_var.var_name = para;
         cur_var.type_of_var = para_type;
         cur_var.method_of_var = cur_method;
         cur_var.class_of_var = aa.name;
         cur_var.is_parameter = true;

         for (int i = 0; i < variable_details.size(); i++) 
         {
            VariableDetails element = variable_details.get(i);
            if(element.var_name==para && element.class_of_var == aa.name && element.method_of_var == cur_method)
            {
               System.out.println("Type error");
               System.exit(0);
            }
         }
         variable_details.add(cur_var);

         return _ret;
    }
    else
    {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
    }
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      // R _ret=null;
      String type_name = (String)(n.f0.accept(this, argu)); 
      return (R)type_name;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret = (R)"array";
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)"boolean";
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)"int";
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      if(parse_no == 2)
    {  
     
      String id = (String) n.f0.accept(this, argu);
     if(gettypescope(id, myclass , mymethod)=="not found")
      {
         System.out.println("Symbol not found");
         System.exit(0);
      }
      String id_type = gettypescope(id, myclass, mymethod);
      n.f1.accept(this, argu);
     String exptype = (String) n.f2.accept(this, argu);

     if(!matches(id_type, exptype))
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f3.accept(this, argu);
      return _ret;
   }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      if(parse_no==2)
     { 
         String id = (String) n.f0.accept(this, argu);
        
         
      if(gettypescope(id, myclass , mymethod)=="not found")
         {
            System.out.println("Symbol not found");
            System.exit(0);
         }
         String id_type = gettypescope(id, myclass, mymethod);
         if(id_type!="array")
          {
            System.out.println("Type error");
            System.exit(0);
         }
         n.f1.accept(this, argu);
        String exptype = (String) n.f2.accept(this, argu);
        if(exptype != "int")
        {
          System.out.println("Type error");
            System.exit(0);
        }
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         String rhs_type = (String) n.f5.accept(this, argu);
         if(rhs_type != "int")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         n.f6.accept(this, argu);
         return _ret;
     }
     else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      if(parse_no==2)
     { 
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exptype = (String) n.f2.accept(this, argu);
      if(exptype != "boolean")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
     }
   
   else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         
         return _ret;
      }
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      if(parse_no==2)
     {
       n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exptype = (String) n.f2.accept(this, argu);
      if(exptype != "boolean")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
     }
     else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String exptype = (String) n.f2.accept(this, argu);
         if(exptype != "boolean")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
       
         return _ret;
      }
   }

   /**
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public R visit(DoStatement n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      String exptype = (String) n.f4.accept(this, argu);
         if(exptype != "boolean")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String expr_type = (String) n.f2.accept(this, argu);
         
         if(expr_type != "int")
         {
                  
               System.out.println("Type error");
               System.exit(0);
            
         }
         
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
     }
     else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> OrExpression()  
    }
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      
      String type = (String)n.f0.accept(this, argu);
      return (R)type;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) 
   {

         R _ret=null;
         if(parse_no==2)
         {  
            String lhs_type = (String)  n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            String rhs_type = (String)  n.f2.accept(this, argu);
            if(lhs_type!="boolean")
            {
               System.out.println("Type error");
               System.exit(0);
            }
            else if (rhs_type!= "boolean")
            {
               System.out.println("Type error");
               System.exit(0);
            }
            return (R)"boolean";
         }
         else
         {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            return _ret;
         }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         String lhs_type = (String)  n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String rhs_type = (String)  n.f2.accept(this, argu);
         if(lhs_type!="boolean")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         else if (rhs_type!= "boolean")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         return (R)"boolean";
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      
      R _ret=null;
      if(parse_no==2)
     { 
         String lhs_type = (String)  n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String rhs_type = (String)  n.f2.accept(this, argu);
         if(lhs_type!="int")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         else if (rhs_type!= "int")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         return (R)"boolean";
      
     }
     else
     {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
     }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {  
         String lhs_type = (String)n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String rhs_type = (String)n.f2.accept(this, argu);
         if(!matches(lhs_type, rhs_type) && !matches(lhs_type, rhs_type))
         {
            System.out.println("Type error");
            System.exit(0);
         }
         return (R)"boolean";
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(AddExpression n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         String lhs_type = (String)  n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String rhs_type = (String)  n.f2.accept(this, argu);
         
         if(lhs_type!="int")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         else if (rhs_type!= "int")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         
         return (R)"int";
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      
      
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         String lhs_type = (String)  n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String rhs_type = (String)  n.f2.accept(this, argu);
         if(lhs_type!="int")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         else if (rhs_type!= "int")
         {
            System.out.println("Type error");
            System.exit(0);
         }

         return (R)"int";
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         String lhs_type = (String)  n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String rhs_type = (String)  n.f2.accept(this, argu);
         if(lhs_type!="int")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         else if (rhs_type!= "int")
         {
            System.out.println("Type error");
            System.exit(0);
         }

         return (R)"int";
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
     R _ret=null;
      if(parse_no==2)
      {
         String lhs_type = (String)  n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String rhs_type = (String)  n.f2.accept(this, argu);
         if(lhs_type!="int")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         else if (rhs_type!= "int")
         {
            System.out.println("Type error");
            System.exit(0);
         }

         return (R)"int";
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         String arr_var = (String) n.f0.accept(this, argu);
         if(arr_var!= "array")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         n.f1.accept(this, argu);
         String index = (String) n.f2.accept(this, argu);
         if(index != "int")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         n.f3.accept(this, argu);
         return (R)"int";
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         return _ret;  
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
     R _ret=null;
      if(parse_no==2)
      {
         String arr_var = (String) n.f0.accept(this, argu);
         if(arr_var!= "array")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);     
         
         return (R)"int";
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         
         return _ret;  
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      
      R _ret=null;
      if(parse_no==2)
      {
         String obj_type = (String) n.f0.accept(this, argu);
         // System.out.println(obj_type+"\n\n000");
         if(!class_details.containsKey(obj_type))   
         {
            System.out.println("Symbol not found");
            System.exit(0);
         } 
         n.f1.accept(this, argu);
         String method_name = (String) n.f2.accept(this, argu);
        
        if(!class_details.get(obj_type).extended)
         {
            if(!class_details.get(obj_type).method_names.contains(method_name))
            {
               System.out.println("Symbol not found");
               System.exit(0);
            }
         } 
         else
         {
            int found =0;
            String cur_class_name = obj_type;
            while(true)
            {
               if(class_details.get(cur_class_name).method_names.contains(method_name))
               {
                  obj_type = cur_class_name;
                  found = 1;
                  break;
               }
               if(class_details.get(cur_class_name).extended)
               {
                  cur_class_name = class_details.get(cur_class_name).extended_class_name;
               }
               else
               {
                  if(found==0)
                  {
                     System.out.println("Symbol not found");
                     System.exit(0);
                  }
                  break;
               }
            }
         }
         MethodDetails element = new MethodDetails();
         for(int i=0;i<method_details.size();i++)
         {
            element = method_details.get(i);
            if(element.name == method_name && element.class_of_method == obj_type)
            {
               break;
            }

         }
          
         n.f3.accept(this, argu);
         Vector<String> param_list = new Vector<>();
         n.f4.accept(this, (A)param_list);
        
         if(element.parameter_types.size() != param_list.size())
         {
            System.out.println("Type error");
            System.exit(0);
         }
         for(int i=0; i<element.parameter_types.size();i++)
         {
          
            if(!matches(element.parameter_types.get(i),param_list.get(i)))
            {
               System.out.println("Type error");
               System.exit(0);
            }
         }

         n.f5.accept(this, argu);
         return (R)element.return_type;
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);

         return _ret;
      }
      
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
        Vector<String> arg = (Vector<String>)argu ;
         
         String expr_type = (String)n.f0.accept(this, argu);
      
         arg.add(expr_type);
         n.f1.accept(this, argu);
         return _ret ;
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
      
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      if(parse_no==2)
     { 
       Vector<String> vv = (Vector<String>)argu;
       n.f0.accept(this, argu);
       String exp_type = (String) n.f1.accept(this, argu);
       vv.add(exp_type);
       return _ret;
     }
     else
     {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
     }
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
     
      if(parse_no==2)
      {
         String pm_type = (String)n.f0.accept(this, argu);
       
         if(pm_type=="int"||pm_type=="boolean"|| pm_type == "array")
         {
            
            return (R)pm_type;
         }
         else if (class_details.containsKey(pm_type))
         {
            
            return (R)pm_type;
         }
         else //is it a variable
         {
             String type = gettypescope(pm_type, myclass, mymethod);
            
            if(type == "not found")
            {
               System.out.println("Symbol not found");
               System.exit(0);
            }
             return (R)type;
              
            }
            
         


      }
      else
      {
         n.f0.accept(this, argu);
         return _ret;
      }
      }

      
   

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {

      R _ret=null;
      if(parse_no==2)
      {
         n.f0.accept(this, argu);
         return (R)"int";
      }
      else
      {
          n.f0.accept(this, argu);
         return _ret;
      }

   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         n.f0.accept(this, argu);
        return (R)"boolean";
      }
      else
      {
          n.f0.accept(this, argu);
        return _ret;
      }
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
     if(parse_no==2)
      {
         n.f0.accept(this, argu);
        return (R)"boolean";
      }
      else
      {
          n.f0.accept(this, argu);
        return _ret;
      }
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
     /// R _ret=null;
     
      n.f0.accept(this, argu);
      return (R)n.f0.tokenImage;
      
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      
      if(parse_no==2)
     { 
      
      n.f0.accept(this, argu);
      return (R)myclass;
     }
     else
     {
      n.f0.accept(this, argu);
      return _ret;
     }
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         String expr_type = (String)n.f3.accept(this, argu);
         if(expr_type!="int")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         
         n.f4.accept(this, argu);
        
         return (R)"array";
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;

      }
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      if(parse_no==2)
      {
         n.f0.accept(this, argu);
         String object_type = (String) n.f1.accept(this, argu);
         if(!class_details.containsKey(object_type))
         {
            System.out.println("Symbol not found");
         }
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         return (R)object_type;
     }
     else
     {
       n.f0.accept(this, argu);
       n.f1.accept(this, argu);
       n.f2.accept(this, argu);
       n.f3.accept(this, argu);
        
       return _ret;
     }
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
     if(parse_no==2)
     {
         n.f0.accept(this, argu);
         String expr_type = (String)n.f1.accept(this, argu);
         if(expr_type!="boolean")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         return (R)"boolean";
     }
     else
     {
       n.f0.accept(this, argu);
       n.f1.accept(this, argu);
       return _ret;
     }
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
     if(parse_no==2 )
     {
      n.f0.accept(this, argu);
      String expr_type = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R) expr_type;
     }
     else
     { 
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
     }
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
