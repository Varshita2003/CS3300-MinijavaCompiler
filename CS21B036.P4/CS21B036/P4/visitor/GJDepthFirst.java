//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import java.util.*;




/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */

class BasicBlock {
   public int number;
   public String name;
   public String type;
   public String label;
   public Vector<String> out = new Vector<>();
   public Vector<String> in = new Vector<>();
   public Vector<String> use = new Vector<>();
   public Vector<String> def = new Vector<>();
   public Vector<Integer> succ = new Vector<>();
   public boolean is_last = false;

   public String code_2 ;
   public Boolean is_reg = false;
   public Boolean is_argu = false;
   public String stackspace;
   public String register;
   
   
}

class Procedure_attributes {
   public Integer max = 0;
   public Integer stackslots = 0;
   public Integer argu = 0;
   public Boolean is_calling = false;
   public Boolean is_spilled = false;
   public Integer stack_pointer ;
}

class Liveranges
{
   public String temp;
   public Integer live_in;
   public Integer live_out;
   public String register;
   public String stackspace;
   public boolean is_reg = false;
}


public class GJDepthFirst<R, A> implements GJVisitor<R, A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   int counter = 0;
   int parse_no = 1;
   String current_procedure;
   int in_temp = 0;
   int in_stlist = 0;
   int in_jmp = 0;
   int in_cjmp = 0;
   int in_smpl = 0;
   int stack_pointer =0;
   int in_hload =0;
   int in_hstore =0;
   int omg  = 0;
   HashMap<String, Vector<BasicBlock>> procedure_bb = new HashMap<>();
   HashMap<String, Procedure_attributes> procedure_attr = new HashMap<>();
   HashMap<String, Vector<Liveranges>> var_live_ranges = new HashMap<>();
   Vector<Liveranges> active = new Vector<>();
   Deque<String> free_regs = new ArrayDeque<>();
   

   Comparator<Liveranges> customComparator = new Comparator<Liveranges>() {
            @Override
            public int compare(Liveranges obj1, Liveranges obj2) {
                return Integer.compare(obj1.live_in, obj2.live_in);
            }
        };
   Comparator<Liveranges> customComparator2 = new Comparator<Liveranges>() {
            @Override
            public int compare(Liveranges obj1, Liveranges obj2) {
                return (Integer.compare(obj1.live_out, obj2.live_out));
            }
        };

   public static Vector<String> setMinus(Vector<String> set1, Vector<String> set2) 
   {
        Vector<String> difference = new Vector<>(set1);
        difference.removeAll(set2);
        return difference;
   }

    public static Vector<String> setUnion(Vector<String> set1, Vector<String> set2) 
    {
        Vector<String> union = new Vector<>(set1);
        for (String element : set2) {
            if (!union.contains(element)) {
                union.add(element);
            }
        }
        return union;
    }

   public void Calculate_in_out()
   {
      for (Map.Entry<String, Vector<BasicBlock>> entry : procedure_bb.entrySet()) 
      {
            String key = entry.getKey();
            // System.out.println(key + "mannnn");
            Vector<BasicBlock> bb = entry.getValue();
            boolean change = true;
            while (change)
            {
               change = false;
               for(int i = bb.size()-1; i>=0; i--)
               {
                    BasicBlock element = bb.get(i);
                    Vector<String> prev_in = new Vector<>(element.in);
                    Vector<String> prev_out = new Vector<>(element.out);
                    Vector<String> out_minus_def = setMinus(element.out, element.def);
                    element.in = setUnion(element.use,out_minus_def); 
                    Vector<String> union = new Vector<>();
                    for(int j=0;j<bb.size();j++)
                    {
                      BasicBlock unicorn = bb.get(j);
                      
                      if(element.succ.contains(unicorn.number))
                      {
                         union = setUnion(union, unicorn.in);
                      }
                    }
                    element.out = union;
                    if(prev_in.size()!= element.in.size() || prev_out.size() != element.out.size())
                    {
                        change = true;
                    }

               }
            }
          
      }
   }
   public void Calculate_live_ranges()
   {
      
      for (Map.Entry<String, Vector<BasicBlock>> entry : procedure_bb.entrySet())
      {
         String key = entry.getKey();
         Vector<BasicBlock> bb = entry.getValue();
         Vector<Liveranges> vv = new Vector<>();
         var_live_ranges.put(key,vv);
         // System.out.println("Key: " + entry.getKey());
         for (int i = 0; i < bb.size(); i++)
         {
             BasicBlock element = bb.get(i);
             for(int j=0;j<element.in.size() ;j++)
             {
                  int found = 0;
                  String tempu = element.in.get(j);
                  for(int k=0;k<vv.size();k++)
                  {
                     if(vv.get(k).temp.equals(tempu))
                     {
                        // System.out.println("Found ya!  "+ tempu+"kk");
                        // System.out.println(found);
                        found=1;
                        // System.out.println(found);
                        vv.get(k).live_out = element.number;
                        break;
                     }
                  }
                  if(found == 0)
                  {
                     // System.out.println(found);
                     // System.out.println(tempu + " yo mann");
                     Liveranges meme = new Liveranges();
                     meme.temp = tempu;
                     meme.live_in = element.number;
                     meme.live_out = element.number;
                     vv.add(meme);
                  }
             }
         }
      }
   }

   public void Expire_Old_Intervals(Liveranges cur_interval)
   {
       while(!active.isEmpty())
       {
           Liveranges hey = active.get(0);
           if(hey.live_out>= cur_interval.live_in)
           return;
           else
           {
              free_regs.push(hey.register);
              active.remove(0);
              Collections.sort(active,customComparator2);
           }
       }
   }
   public void Spill_At_Interval(Liveranges cur_interval)
   {
        Liveranges spill = active.get(active.size()-1);
        if(spill.live_out > cur_interval.live_out)
        {
         cur_interval.register = spill.register;
         cur_interval.is_reg = true;
         spill.stackspace = Integer.toString(stack_pointer);
         stack_pointer++;
         spill.is_reg = false;
         active.remove(active.size()-1);
         active.add(cur_interval);
         Collections.sort(active,customComparator2);
        }
        else
        {
          cur_interval.stackspace = Integer.toString(stack_pointer);
          stack_pointer++;
        }
   }

   public void Initialize_free_regs()
   {
      free_regs.clear();
      for(int i=0;i<=9;i++)
      {
         free_regs.push("t"+(9-i));
      }
      for(int i=0;i<=7;i++)
      {
         free_regs.push("s"+(7-i));
      }
      return;
   }
   public void Allocate_registers()
   {
      
      for (Map.Entry<String, Vector<Liveranges>> entry : var_live_ranges.entrySet()) 
      {
         active.clear();
         // System.out.println(active);
         //populate free regs with s0-s7, t0-t9
         Initialize_free_regs();
         String key = entry.getKey();
         Vector<Liveranges> bb = entry.getValue();
         // System.out.println("Key: " + entry.getKey());

            if(procedure_attr.get(key).argu>4)
            stack_pointer= procedure_attr.get(key).argu - 4;
            else
            stack_pointer =0;
         procedure_attr.get(key).stackslots = stack_pointer;
         if(key.equals("Main"))
         {
            if(procedure_attr.get(key).is_calling)
             procedure_attr.get(key).stackslots += 10;
         }
         else
         {
            stack_pointer+=8;
            if(procedure_attr.get(key).is_calling)
             {
               procedure_attr.get(key).stackslots += 10;
              
             }
         }
         Collections.sort(bb, customComparator);
         for (int i = 0; i < bb.size(); i++)
         { 
            Liveranges current = bb.get(i);
            Expire_Old_Intervals(current);
            if(active.size()==18)
            {
               Spill_At_Interval(current);
               procedure_attr.get(key).is_spilled = true;
            }
            else
            {
               String reg = free_regs.pop();
               current.register = reg;
               current.is_reg = true;
               active.add(current);
               Collections.sort(active,customComparator2);
            }
         }
         procedure_attr.get(key).stack_pointer = stack_pointer;
         // System.out.println("dsbgwjs"+" "+key+" "+stack_pointer);
         procedure_attr.get(key).stackslots += stack_pointer;
      }
      return;
   }
   public R visit(NodeList n, A argu) {
      R _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      Vector<BasicBlock> v = new Vector<>();
      if (n.present()) {
         R _ret = null;
         int _count = 0;
         
         for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            BasicBlock t = (BasicBlock) e.nextElement().accept(this, argu);
            v.add(t);
            _count++;
         }
         return (R) v;
      } else
         return (R)v;
   }

   public R visit(NodeOptional n, A argu) {
      if (n.present())
         return n.node.accept(this, argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) {
      return null;
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {

      R _ret = null;
      parse_no = (Integer) argu;
      if (parse_no == 1) {
         n.f0.accept(this, argu);

         current_procedure = "Main";
         Vector<BasicBlock> basic_blocks = new Vector<>();
         procedure_bb.put(current_procedure, basic_blocks);
         Procedure_attributes op = new Procedure_attributes();
         op.argu = 0;
         procedure_attr.put(current_procedure, op);

         n.f1.accept(this, argu);

         n.f2.accept(this, argu);
         
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         procedure_bb.get("Main").get(procedure_bb.get("Main").size() - 1).is_last = true;

         for (Map.Entry<String, Vector<BasicBlock>> entry : procedure_bb.entrySet()) {
            String key = entry.getKey();
            Vector<BasicBlock> bb = entry.getValue();
            // System.out.println("Key: " + entry.getKey());
            for (int i = 0; i < bb.size(); i++) {
               BasicBlock element = bb.get(i);
               if (element.is_last == false) {
                  if (element.type != "Cjump" && element.type != "Jump") {
                     Integer successor = element.number + 1;

                     for (int j = 0; j < bb.size(); j++) {
                        BasicBlock check = bb.get(j);
                        if (check.number == successor) {
                           if (check.type == "Label") {
                              successor = check.number + 1;
                           }
                        }
                     }

                     element.succ.add(successor);
                  } 
                  else 
                  {
                     if (element.type == "Jump") 
                     {
                        String lbl = element.label;
                        for (int j = 0; j < bb.size(); j++) 
                        {
                           BasicBlock check = bb.get(j);
                           if (check.name == lbl) 
                           {
                             element.succ.add(check.number);
                           }
                        }
                     }
                     if(element.type == "Cjump")
                     {
                        String lbl = element.label;
                        for (int j = 0; j < bb.size(); j++) 
                        {
                           BasicBlock check = bb.get(j);
                           if (check.name == lbl) 
                           {
                             element.succ.add(check.number);
                           }
                        }
                        element.succ.add(element.number + 1);
                     }
                  }
               }
            }
         }
         
         Calculate_in_out();
         Calculate_live_ranges();
         Allocate_registers();

         // for (Map.Entry<String, Vector<BasicBlock>> entry : procedure_bb.entrySet()) {
         //    String key = entry.getKey();
         //    Vector<BasicBlock> bb = entry.getValue();
         //    System.out.println("Key: " + entry.getKey());
         //    for (int i = 0; i < bb.size(); i++)
         //       System.out.println(bb.get(i).number + " " + bb.get(i).name + " " + bb.get(i).def + " " + bb.get(i).use
         //             + " " + bb.get(i).succ + " " + bb.get(i).is_last + " " + bb.get(i).in + " " + bb.get(i).out);
         // }

         //  for (Map.Entry<String, Vector<Liveranges>> entry : var_live_ranges.entrySet()) {
         //    String key = entry.getKey();
         //    Vector<Liveranges> bb = entry.getValue();
         //    System.out.println("Key: " + entry.getKey());
         //    for (int i = 0; i < bb.size(); i++)
         //       System.out.println(bb.get(i).temp + " "+bb.get(i).live_in+ " "+bb.get(i).live_out +" "+bb.get(i).register+" "+bb.get(i).is_reg+" "+bb.get(i).stackspace);
         // }

         //    for (Map.Entry<String, Procedure_attributes> entry : procedure_attr.entrySet()) {
         //    String key = entry.getKey();
         //    System.out.println(key);
         //    Procedure_attributes bb = entry.getValue();
         //    System.out.println(bb.argu + " "+bb.stackslots);
            
         // }


         return _ret;
      } 
      else 
      {
         n.f0.accept(this, argu);
         current_procedure = "Main";
         counter = 0;
         Integer argu1 = procedure_attr.get(current_procedure).argu;
         Integer stack1 = procedure_attr.get(current_procedure).stackslots;
         Integer max1 = procedure_attr.get(current_procedure).max;

         System.out.println("MAIN"+" "+"["+argu1+"]"+" "+"["+stack1+"]"+" "+"["+max1+"]");
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         System.out.println("END");
         if(procedure_attr.get(current_procedure).is_spilled)
         System.out.println("// SPILLED");
         else
         System.out.println("// NOTSPILLED");
         //spillstatus
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret = null;
      if (parse_no == 1) {
         in_stlist = 1;
         n.f0.accept(this, argu);
         in_stlist = 0;
         // System.out.println("hello");
         return _ret;
      } else {
         in_stlist = 1;
         n.f0.accept(this, argu);
         in_stlist = 0;
         return _ret;
      }
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret = null;
      if (parse_no == 1) {
         counter = 0;
         current_procedure = ((BasicBlock) n.f0.accept(this, argu)).name;
         // System.out.println(current_procedure);
         Vector<BasicBlock> basic_blocks = new Vector<>();
         procedure_bb.put(current_procedure, basic_blocks);
         n.f1.accept(this, argu);
         BasicBlock t1 = (BasicBlock)n.f2.accept(this, argu);
         Procedure_attributes op = new Procedure_attributes();
         op.argu = Integer.parseInt(t1.name);
         procedure_attr.put(current_procedure,op);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      } else {
         counter =0;
         current_procedure = ((BasicBlock) n.f0.accept(this, argu)).name;
         Integer argu1 = procedure_attr.get(current_procedure).argu;
         Integer stack1 = procedure_attr.get(current_procedure).stackslots;
         Integer max1 = procedure_attr.get(current_procedure).max;

         System.out.println(current_procedure+" "+"["+argu1+"]"+" "+"["+stack1+"]"+" "+"["+max1+"]");
         n.f1.accept(this, argu);
         omg=1;
         n.f2.accept(this, argu);
         omg=0;
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> NoOpStmt()
    * | ErrorStmt()
    * | CJumpStmt()
    * | JumpStmt()
    * | HStoreStmt()
    * | HLoadStmt()
    * | MoveStmt()
    * | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret = null;
      if (parse_no == 1) {
         n.f0.accept(this, argu);
         counter++;
         BasicBlock l = new BasicBlock();
         l.name = "Noop";
         l.type = "Noop";
         l.number = counter;
         procedure_bb.get(current_procedure).add(l);
         return _ret;
      } else {
         counter++;
         n.f0.accept(this, argu);
         System.out.println("\t"+"\t"+"NOOP");
         return _ret;
      }

   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret = null;
      if (parse_no == 1) {
         n.f0.accept(this, argu);
         counter++;
         BasicBlock l = new BasicBlock();
         l.name = "Error";
         l.type = "Error";
         l.number = counter;
         procedure_bb.get(current_procedure).add(l);
         return _ret;
      } else {
         counter++;
         n.f0.accept(this, argu);
         System.out.println("\t"+"\t"+"ERROR");
         return _ret;
      }
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret = null;
      if (parse_no == 1) {
         in_cjmp = 1;
         n.f0.accept(this, argu);
         BasicBlock t = (BasicBlock) n.f1.accept(this, argu);
         String temporary_name = t.name;
         // System.out.println(t.name + " in cjump");
         counter++;
         BasicBlock l = new BasicBlock();
         l.name = "Cjump";
         l.type = "Cjump";
         l.number = counter;
         l.use.add(temporary_name);

         BasicBlock t1 = (BasicBlock) n.f2.accept(this, argu);
         l.label = t1.name;
         procedure_bb.get(current_procedure).add(l);
         in_cjmp = 0;
         return _ret;
      } else {
         in_cjmp = 1;
         counter++;
         n.f0.accept(this, argu);
         BasicBlock t1 = (BasicBlock)n.f1.accept(this, argu);
         BasicBlock t2 = (BasicBlock)n.f2.accept(this, argu);
          if(!t1.is_reg)
            { 
               System.out.println("\t"+"\t"+"ALOAD v0 "+ "SPILLEDARG "+t1.stackspace );
               System.out.println("\t"+"\t"+"CJUMP v0 "+ t2.name+"_"+current_procedure);
            }
            else
            {
               System.out.println("\t"+"\t"+"CJUMP "+t1.register+" "+t2.name+"_"+current_procedure);
            }
         in_cjmp=0;
         return _ret;
      }

   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret = null;
      if (parse_no == 1) {
         in_jmp = 1;
         n.f0.accept(this, argu);
         BasicBlock t1 = (BasicBlock) n.f1.accept(this, argu);
         BasicBlock l = new BasicBlock();
         counter++;
         l.name = "Jump";
         l.type = "Jump";
         l.number = counter;
         l.label = t1.name;
         procedure_bb.get(current_procedure).add(l);
         in_jmp = 0;
         return _ret;
      } else {
         in_jmp =1;
         counter++;
         n.f0.accept(this, argu);
         BasicBlock t1 = (BasicBlock)n.f1.accept(this, argu);
         System.out.println("\t"+"\t"+"JUMP "+t1.name+"_"+current_procedure);
         in_jmp =0;
         return _ret;
      }
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret = null;
      if (parse_no == 1) {
         n.f0.accept(this, argu);
         BasicBlock t1 = (BasicBlock) n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         BasicBlock t2 = (BasicBlock) n.f3.accept(this, argu);

         counter++;
         BasicBlock l = new BasicBlock();
         l.name = "Hstore";
         l.type = "Hstore";
         l.number = counter;
         l.use.add(t1.name);
         l.use.add(t2.name);

         procedure_bb.get(current_procedure).add(l);

         return _ret;
      } else {
         in_hstore = 1;
         counter++;
         n.f0.accept(this, argu);
         BasicBlock t1 = (BasicBlock) n.f1.accept(this, argu);
         BasicBlock t2 = (BasicBlock) n.f2.accept(this, argu);
         BasicBlock t3 = (BasicBlock) n.f3.accept(this, argu);
         String temp1_reg;
         String temp2_reg;
         if(!t1.is_reg)
            {
               System.out.println("\t"+"\t"+"ALOAD v0 "+ "SPILLEDARG "+t1.stackspace );
               temp1_reg = "v0";
            }
            else
            {
               temp1_reg = t1.register;
            }

         if(!t3.is_reg)
            {
               System.out.println("\t"+"\t"+"ALOAD v1 "+ "SPILLEDARG "+t3.stackspace );
               temp2_reg = "v1";
            }
            else
            {
               temp2_reg = t3.register;
            }
         System.out.println("\t"+"\t"+"HSTORE "+temp1_reg+" "+t2.name+" "+temp2_reg);
         in_hstore = 0;
         return _ret;
      }
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret = null;
      if (parse_no == 1) {
         n.f0.accept(this, argu);
         BasicBlock t1 = (BasicBlock) n.f1.accept(this, argu);

         BasicBlock t2 = (BasicBlock) n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         counter++;
         BasicBlock l = new BasicBlock();
         l.name = "Hload";
         l.type = "Hload";
         l.number = counter;
         l.def.add(t1.name);
         l.use.add(t2.name);

         procedure_bb.get(current_procedure).add(l);

         return _ret;
      } else {
         in_hload = 1;
         counter++;
         n.f0.accept(this, argu);
         BasicBlock t1 = (BasicBlock)n.f1.accept(this, argu);
         BasicBlock t2 = (BasicBlock)n.f2.accept(this, argu);
         BasicBlock t3 = (BasicBlock)n.f3.accept(this, argu);
         String temp1_reg;
         Integer temp1_live_in =0 ;
         Integer temp1_live_out=0;
         String temp2_reg;
         if(!t1.is_reg)
            {
               if(t1.stackspace != null)
               System.out.println("\t"+"\t"+"ALOAD v0 "+ "SPILLEDARG "+t1.stackspace );
               temp1_reg = "v0";
            }
            else
            {
               temp1_reg = t1.register;
               
            }

         if(!t2.is_reg)
            {
               if(t2.stackspace != null)
               System.out.println("\t"+"\t"+"ALOAD v1 "+ "SPILLEDARG "+t2.stackspace );
               temp2_reg = "v1";
            }
            else
            {
               temp2_reg = t2.register;
            }
         Vector<Liveranges> current_liv_ranges = var_live_ranges.get(current_procedure);
         for(int i=0; i<current_liv_ranges.size(); i++)
         {
            Liveranges element = current_liv_ranges.get(i);
            // System.out.println(t1.name);
            if(element.temp.equals(t1.name))
            {
               temp1_live_in = element.live_in;
               temp1_live_out = element.live_out;
            }
         }
         // System.out.println(counter + " " + temp1_live_in + " " + temp1_live_out);
         if(counter >= temp1_live_in-1 && counter <= temp1_live_out)
         {
            System.out.println("\t"+"\t"+"HLOAD "+temp1_reg+" "+temp2_reg+" "+t3.name);
            if(!t1.is_reg)
            {
               System.out.println("\t"+"\t"+"ASTORE "+ "SPILLEDARG "+t1.stackspace+ " v0");
            }
         }
         else
         System.out.println("\t"+"\t"+"HLOAD "+"v1"+" "+temp2_reg+" "+t3.name);
         in_hload = 0;

         return _ret;
      }
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret = null;
      if (parse_no == 1) {
         n.f0.accept(this, argu);
         BasicBlock t1 = (BasicBlock) n.f1.accept(this, argu);
         BasicBlock t2 = (BasicBlock) n.f2.accept(this, argu);

         BasicBlock l = new BasicBlock();
         counter++;
         l.number = counter;
         l.name = "Move";
         l.type = "Move";
         l.def.add(t1.name);
         if (t2.type == "Temporary") {
            l.use.add(t2.name);
         } else {
            if (t2.type == "Call" || t2.type == "Hallocate" || t2.type == "BinOp") {
               for (int i = 0; i < t2.use.size(); i++) {
                  l.use.add(t2.use.get(i));
               }
            }
         }
         procedure_bb.get(current_procedure).add(l);

         return _ret;
      } 
      else 
      {
         counter++;
         n.f0.accept(this, argu);
         BasicBlock t1 = (BasicBlock)n.f1.accept(this, argu);
         BasicBlock t2 = (BasicBlock) n.f2.accept(this, argu);
         Integer temp1_live_in =0 ;
         Integer temp1_live_out=0;
         if(!t2.type.equals("Temporary"))
         {
            if(!t1.is_reg)
            {
               // System.out.println("ALOAD v0 "+ "SPILLEDARG "+t1.stackspace );
               System.out.println("\t"+"\t"+"MOVE v0 "+ t2.code_2);
               if(t1.stackspace != null)
               System.out.println("\t"+"\t"+"ASTORE "+"SPILLEDARG "+t1.stackspace + " v0");
            }
            else
            {
               if(t1.register != null)
               System.out.println("\t"+"\t"+"MOVE "+t1.register+" "+t2.code_2);
            }
         }
         else
         {
             if(!t1.is_reg)
            {
               // System.out.println("ALOAD v0 "+ "SPILLEDARG "+t1.stackspace );
               if(!t2.is_reg)
               {
                  System.out.println("\t"+"\t"+"ALOAD v1 "+ "SPILLEDARG "+t2.stackspace );
                  System.out.println("\t"+"\t"+"MOVE v0 "+ " v1");
                  if(t1.stackspace != null)
                  System.out.println("\t"+"\t"+"ASTORE "+"SPILLEDARG "+t1.stackspace + " v0");
               }
               else
               {
                  System.out.println("\t"+"\t"+"MOVE v0 "+ t2.register);
                  if(t1.stackspace != null)
                  System.out.println("\t"+"\t"+"ASTORE "+"SPILLEDARG "+t1.stackspace + " v0");
               }
               
            }
            else
            {
               if(!t2.is_reg)
               {
                  System.out.println("\t"+"\t"+"ALOAD v0 "+ "SPILLEDARG "+t2.stackspace );
                  
                     Vector<Liveranges> current_liv_ranges = var_live_ranges.get(current_procedure);
                     for(int i=0; i<current_liv_ranges.size(); i++)
                     {
                        Liveranges element = current_liv_ranges.get(i);
                        // System.out.println(t1.name);
                        if(element.temp.equals(t1.name))
                        {
                           temp1_live_in = element.live_in;
                           temp1_live_out = element.live_out;
                        }
                     }
                     // System.out.println(counter + " " + temp1_live_in + " " + temp1_live_out);
                     if(counter >= temp1_live_in-1 && counter <= temp1_live_out)
                     {
                        System.out.println("\t"+"\t"+"MOVE "+t1.register+" v0");
                     }
                     else
                     System.out.println("\t"+"\t"+"MOVE "+"v1"+" "+ "v0");
                     
                  
               }
               else
               {
                  if(t1.register != null)
                  {
                     Vector<Liveranges> current_liv_ranges = var_live_ranges.get(current_procedure);
                     for(int i=0; i<current_liv_ranges.size(); i++)
                     {
                        Liveranges element = current_liv_ranges.get(i);
                        // System.out.println(t1.name);
                        if(element.temp.equals(t1.name))
                        {
                           temp1_live_in = element.live_in;
                           temp1_live_out = element.live_out;
                        }
                     }
                     // System.out.println(counter + " " + temp1_live_in + " " + temp1_live_out);
                     if(counter >= temp1_live_in-1 && counter <= temp1_live_out)
                     {
                        System.out.println("\t"+"\t"+"MOVE "+t1.register+" "+t2.register);
                     }
                     else
                     System.out.println("\t"+"\t"+"MOVE "+"v1"+" "+t2.register);
                  }
                  // System.out.println("\t"+"\t"+"MOVE "+t1.register+" "+t2.register);
               }
               
            }
         }
         
         return _ret;
      }
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret = null;
      if (parse_no == 1) {
         n.f0.accept(this, argu);
         BasicBlock t1 = (BasicBlock) n.f1.accept(this, argu);
         counter++;
         BasicBlock l = new BasicBlock();
         l.name = "Print";
         l.type = "Print";
         l.number = counter;
         l.use.add(t1.name);
         procedure_bb.get(current_procedure).add(l);
         return _ret;
      } else {
         counter++;
         n.f0.accept(this, argu);
         BasicBlock t1 = (BasicBlock)n.f1.accept(this, argu);
         if(t1.type.equals("Temporary"))
         {
            if(!t1.is_reg)
            {
               System.out.println("\t"+"\t"+"ALOAD v0 "+"SPILLEDARG "+t1.stackspace);
               System.out.println("\t"+"\t"+"PRINT v0");
            }
            else
            {
               System.out.println("\t"+"\t"+"PRINT "+t1.register);
            }
         }
         else
         {
            System.out.println("\t"+"\t"+"PRINT "+t1.code_2);
         }
         return _ret;
      }
   }

   /**
    * f0 -> Call()
    * | HAllocate()
    * | BinOp()
    * | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret = null;
      if (parse_no == 1) {
         BasicBlock l = (BasicBlock) n.f0.accept(this, argu);

         return (R) l;
      } else {
            BasicBlock l = (BasicBlock)n.f0.accept(this, argu);

         return (R)l;
      }
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {

      R _ret = null;
      if (parse_no == 1) {
         n.f0.accept(this, argu);
         
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         BasicBlock t1 = (BasicBlock) n.f3.accept(this, argu);
         BasicBlock l = new BasicBlock();
         counter++;
         l.name = "Return";
         l.number = counter;
         if (t1.type == "Temporary")
            l.use.add(t1.name);
         n.f4.accept(this, argu);
         l.is_last = true;
         procedure_bb.get(current_procedure).add(l);
         return _ret;
      } else 
      {
         n.f0.accept(this, argu);
         String procedure = current_procedure;
         if(!procedure.equals("Main"))
         {
            int start_point = 0;
            if(procedure_attr.get(procedure).argu>4)
            {
               start_point = procedure_attr.get(procedure).argu-4;
            }
            for(int i=0;i<8;i++)
            {
               System.out.println("\t"+"\t"+"ASTORE "+ "SPILLEDARG "+(start_point+i)+" "+"s"+i);
            }
         }
         
         //Agrument info

         int no_of_args = procedure_attr.get(procedure).argu;
         if(no_of_args <= 4)
         {
            Vector<Liveranges> bro = var_live_ranges.get(procedure);
            for(int i=0;i<no_of_args;i++)
            {
               for(int j=0;j<bro.size();j++)
               {
                  Liveranges element = bro.get(j);
                  if(element.temp.equals("TEMP "+i))
                  {
                     if(!element.is_reg)
                     {
                        System.out.println("MOVE v0 "+ "a"+i);
                        if(element.stackspace != null)
                         {
                           System.out.println("ASTORE "+ "SPILLEDARG "+element.stackspace+ " "+"v0");
                         }
                     }
                     else
                     {
                        System.out.println("MOVE "+element.register+" "+"a"+i);
                     }
                  }
               }
            }
         }
         else
         {
            Vector<Liveranges> bro = var_live_ranges.get(procedure);
            for(int i=0;i<4;i++)
            {
               for(int j=0;j<bro.size();j++)
               {
                  Liveranges element = bro.get(j);
                  if(element.temp.equals("TEMP "+i))
                  {
                     if(!element.is_reg)
                     {
                        System.out.println("MOVE v0 "+ "a"+i);
                        if(element.stackspace != null)
                        {
                           System.out.println("ASTORE "+ "SPILLEDARG "+element.stackspace+ " "+"v0");
                        }
                     }
                     else
                     {
                        System.out.println("MOVE "+element.register+" "+"a"+i);
                     }
                  }
               }
            }
            for(int i=4; i<no_of_args;i++)
            {
               for(int j=0;j<bro.size();j++)
               {
                  Liveranges element = bro.get(j);
                  if(element.temp.equals("TEMP "+i))
                  {
                     if(!element.is_reg)
                     {
                        // System.out.println("MOVE v0 "+ "a"+i);
                        System.out.println("ALOAD v0 "+"SPILLEDARG "+(i-4));
                        if(element.stackspace != null)
                        {
                           System.out.println("ASTORE "+ "SPILLEDARG "+element.stackspace+ " "+"v0");
                        }
                     }
                     else
                     {
                        System.out.println("ALOAD v0 "+"SPILLEDARG "+(i-4));
                        System.out.println("MOVE "+element.register+" "+"v0");
                        // System.out.println("ASTORE "+ "SPILLEDARG "+element.stackspace+ " "+"v0");
                        // System.out.println("MOVE "+element.register+" "+"a"+i);
                     }
                  }
               }
            }
         }
         
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         counter++;
         BasicBlock t1 = (BasicBlock)n.f3.accept(this, argu);
         if(t1.type.equals("Temporary"))
         {
            if(!t1.is_reg)
            {
               System.out.println("\t"+"\t"+"ALOAD v1 "+"SPILLEDARG "+t1.stackspace);
               // System.out.println("MOVE "+"a"+i+" v0");
               System.out.println("\t"+"\t"+"MOVE v0 v1");
            }
            else
            {
               System.out.println("\t"+"\t"+"MOVE v0 "+ t1.register);
            }
        } 
        else
        {
         System.out.println("\t"+"\t"+"MOVE v0 "+t1.code_2);
        }
         n.f4.accept(this, argu);
         if(!procedure.equals("Main"))
         {
            int start_point = 0;
            if(procedure_attr.get(procedure).argu>4)
            {
               start_point = procedure_attr.get(procedure).argu-4;
            }
            for(int i=0;i<8;i++)
            {
               System.out.println("\t"+"\t"+"ALOAD "+"s"+ i +" " +  "SPILLEDARG "+(start_point+i));
            }
         }
         System.out.println("END");
         if(procedure_attr.get(current_procedure).is_spilled)
         System.out.println("// SPILLED");
         else
         System.out.println("// NOTSPILLED");
         return _ret;
      }
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret = null;
      if (parse_no == 1) {
         n.f0.accept(this, argu);
         BasicBlock t1 = (BasicBlock) n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         Vector<BasicBlock> t2 = (Vector<BasicBlock>) n.f3.accept(this, argu);

         // System.out.println(t2.size());
         n.f4.accept(this, argu);
         // counter++;
         BasicBlock l = new BasicBlock();
         // l.number = counter;
         l.name = "Call";
         l.type = "Call";
         // System.out.println(l.use);
         procedure_attr.get(current_procedure).is_calling = true;
         if(t1.type == "Temporary")
         l.use.add(t1.name);
         // System.out.println(t2);
         for (int i = 0; i < t2.size(); i++) {
            l.use.add(t2.get(i).name);
         }
         if(t2.size()> procedure_attr.get(current_procedure).max)
         procedure_attr.get(current_procedure).max = t2.size();
         // procedure_bb.get(current_procedure).add(l);
         return (R) l;
      } 
      else 
      {
         n.f0.accept(this, argu);
         BasicBlock t1 = (BasicBlock)n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         Vector<BasicBlock> t2 = (Vector<BasicBlock>)n.f3.accept(this, argu);

         n.f4.accept(this, argu);
         if(current_procedure == "Main")
         {
            // System.out.println("HEYYY");
            int sp = procedure_attr.get(current_procedure).stack_pointer;
            for(int i =0;i<10;i++)
            {
               System.out.println("\t"+"\t"+"ASTORE SPILLEDARG "+(sp +i)+" "+"t"+i);
            }
            if(t2.size()<=4)
            {
               for(int i=0;i<t2.size();i++)
               {
                  BasicBlock element = t2.get(i);
                   if(!element.is_reg)
                     {
                        System.out.println("\t"+"\t"+"ALOAD v0 "+"SPILLEDARG "+element.stackspace);
                        System.out.println("\t"+"\t"+"MOVE "+"a"+i+" v0");
                     }
                     else
                     {
                        System.out.println("\t"+"\t"+"MOVE "+"a"+i+ " "+element.register);
                     }
               }
            }
            else
            {
               for(int i=0;i<4;i++)
               {
                  BasicBlock element = t2.get(i);
                   if(!element.is_reg)
                     {
                        System.out.println("\t"+"\t"+"ALOAD v0 "+"SPILLEDARG "+element.stackspace);
                        System.out.println("\t"+"\t"+"MOVE "+"a"+i+" v0");
                     }
                     else
                     {
                        System.out.println("\t"+"\t"+"MOVE "+"a"+i+ " "+element.register);
                     }
               }
               for(int i=4;i<t2.size();i++)
               {
                  BasicBlock element = t2.get(i);
                  if(!element.is_reg)
                  {
                     System.out.println("\t"+"\t"+"ALOAD v0 "+"SPILLEDARG "+element.stackspace);
                     System.out.println("\t"+"\t"+"PASSARG "+(i-3)+" v0");
                  }
                  else
                  {
                     System.out.println("\t"+"\t"+"PASSARG "+(i-3)+" "+element.register);
                  }
               }
            }
            if(t1.type.equals("Temporary"))
            {
               if(!t1.is_reg)
               {
                  System.out.println("\t"+"\t"+"ALOAD v0 "+"SPILLEDARG "+t1.stackspace);
                  // System.out.println("MOVE "+"a"+i+" v0");
                  System.out.println("\t"+"\t"+"CALL v0");
               }
               else
               {
                  System.out.println("\t"+"\t"+"CALL "+t1.register);
               }
            }
            else
            {
               System.out.println("\t"+"\t"+"CALL "+t1.code_2);
            }
            for(int i =0;i<10;i++)
            {
               System.out.println("\t"+"\t"+"ALOAD "+"t"+i+" SPILLEDARG "+(i+sp)+" ");
            }

         }
         else
         {
            int extra_args = 0;
            if(procedure_attr.get(current_procedure).argu > 4)
            {
               extra_args = procedure_attr.get(current_procedure).argu - 4;
            }
            int sp = procedure_attr.get(current_procedure).stack_pointer;
            for(int i =0;i<10;i++)
            {
               System.out.println("\t"+"\t"+"ASTORE SPILLEDARG "+(extra_args + i+ sp)+" "+"t"+i);
            }
            if(t2.size()<=4)
            {
               for(int i=0;i<t2.size();i++)
               {
                  BasicBlock element = t2.get(i);
                   if(!element.is_reg)
                     {
                        System.out.println("\t"+"\t"+"ALOAD v0 "+"SPILLEDARG "+element.stackspace);
                        System.out.println("\t"+"\t"+"MOVE "+"a"+i+" v0");
                     }
                     else
                     {
                        System.out.println("\t"+"\t"+"MOVE "+"a"+i+ " "+element.register);
                     }
               }
            }
            else
            {
               for(int i=0;i<4;i++)
               {
                  BasicBlock element = t2.get(i);
                   if(!element.is_reg)
                     {
                        System.out.println("\t"+"\t"+"ALOAD v0 "+"SPILLEDARG "+element.stackspace);
                        System.out.println("\t"+"\t"+"MOVE "+"a"+i+" v0");
                     }
                     else
                     {
                        System.out.println("\t"+"\t"+"MOVE "+"a"+i+ " "+element.register);
                     }
               }
               for(int i=4;i<t2.size();i++)
               {
                  BasicBlock element = t2.get(i);
                  if(!element.is_reg)
                  {
                     System.out.println("\t"+"\t"+"ALOAD v0 "+"SPILLEDARG "+element.stackspace);
                     System.out.println("\t"+"\t"+"PASSARG "+(i-3)+" v0");
                  }
                  else
                  {
                     System.out.println("\t"+"\t"+"PASSARG "+(i-3)+" "+element.register);
                  }
               }
            }
            if(t1.type.equals("Temporary"))
            {
               if(!t1.is_reg)
               {
                  System.out.println("\t"+"\t"+"ALOAD v0 "+"SPILLEDARG "+t1.stackspace);
                  // System.out.println("MOVE "+"a"+i+" v0");
                  System.out.println("\t"+"\t"+"CALL v0");
               }
               else
               {
                  System.out.println("\t"+"\t"+"CALL "+t1.register);
               }
            }
            else
            {
               System.out.println("\t"+"\t"+"CALL "+t1.code_2);
            }
            for(int i =0;i<10;i++)
            {
               System.out.println("\t"+"\t"+"ALOAD "+"t"+(i)+" SPILLEDARG "+(extra_args+i+sp)+" ");
            }
         }
         BasicBlock l = new BasicBlock();
         l.type = "Call";
         l.name = "Call";
         l.code_2 = "v0";
         return (R)l;
      }
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret = null;
      if (parse_no == 1) {
         n.f0.accept(this, argu);
         BasicBlock t1 = (BasicBlock) n.f1.accept(this, argu);
         BasicBlock l = new BasicBlock();
         // counter++;
         l.name = "Hallocate";
         l.type = "Hallocate";
         // l.number = counter;
         l.use.add(t1.name);
         // procedure_bb.get(current_procedure).add(l);
         return (R) l;
      } 
      else 
      {
         n.f0.accept(this, argu);
         BasicBlock t1 = (BasicBlock)n.f1.accept(this, argu);
         if(t1.type.equals("Temporary"))
         {
            if(!t1.is_reg)
            {
               System.out.println("\t"+"\t"+"ALOAD v0 "+"SPILLEDARG "+t1.stackspace);
               t1.code_2 = "v0";
            }
            else
            {
               t1.code_2 = t1.register;
            }
         }
         BasicBlock l = new BasicBlock();
         l.code_2 = "HALLOCATE "+t1.code_2;
         l.name = "Hallocate";
         l.type = "Hallocate";
         return (R)l;
      }

   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret = null;
      if (parse_no == 1) {
         String op = (String) n.f0.accept(this, argu);
         BasicBlock t1 = (BasicBlock) n.f1.accept(this, argu);
         BasicBlock t2 = (BasicBlock) n.f2.accept(this, argu);
         BasicBlock l = new BasicBlock();
         // counter++;
         l.name = op;
         // System.out.println(l.name + "aprse 1");
         l.type = "BinOp";
         l.use.add(t1.name);
         // l.number = counter;

         if (t2.type == "Temporary")
            l.use.add(t2.name);
         // procedure_bb.get(current_procedure).add(l);
         return (R) l;
      } 
      else 
      {
         String op = (String)n.f0.accept(this, argu);
         // System.out.println(op);
         BasicBlock t1 = (BasicBlock) n.f1.accept(this, argu);
         BasicBlock t2 = (BasicBlock) n.f2.accept(this, argu);
           
         BasicBlock l = new BasicBlock();
         if(t1.type.equals("Temporary"))
         {
            if(!t1.is_reg)
            {
               System.out.println("\t"+"\t"+"ALOAD v0 "+"SPILLEDARG "+t1.stackspace);
               t1.code_2 = "v0";
            }
            else
            {
               t1.code_2 = t1.register;
            }
         }
         
         if(t2.type.equals("Temporary"))
         {
            if(!t2.is_reg)
            {
               System.out.println("\t"+"\t"+"ALOAD v1 "+"SPILLEDARG "+t2.stackspace);
               t2.code_2 = "v1";
            }
            else
            {
               t2.code_2 = t2.register;
            }
         }

         l.name = "BinOp";
         l.type = "BinOp";
         l.code_2 = op+" "+t1.code_2+" "+t2.code_2;
         // System.out.println(l.code_2);
         return (R)l;
      }
   }

   /**
    * f0 -> "LE"
    * | "NE"
    * | "PLUS"
    * | "MINUS"
    * | "TIMES"
    * | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret = null;
      n.f0.accept(this,argu);

      return (R)n.f0.choice.toString();

      // if(parse_no == 1)
      // {
      //    String op = (String) n.f0.accept(this, argu);
      //    System.out.println(op);
      //    // op = n.f0.tokenImage;
      //    return (R)op;
      // }
      // else
      // {
      //    String op = (String) n.f0.accept(this, argu); 
      //    System.out.println(op);
      //    // op = n.f0.tokenImage;
      //    return (R)op;
      // }
      
   }

   /**
    * f0 -> Temp()
    * | IntegerLiteral()
    * | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret = null;
      if (parse_no == 1) {
         in_smpl = 1;
         BasicBlock t1 = (BasicBlock) n.f0.accept(this, argu);
         // System.out.println("Simpekkfe"+t1.type);
         in_smpl = 0;
         return (R) t1;
      } else {
         in_smpl = 1;
         BasicBlock t1 = (BasicBlock)n.f0.accept(this, argu);
         // System.out.println(t1.type + " "+t1.name+" "+t1.code_2 + " "+ t1.register + " "+t1.stackspace);
         in_smpl =0;
         return (R)t1;
      }
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret = null;
      if (parse_no == 1) {
         in_temp = 1;
         n.f0.accept(this, argu);
         String num = ((BasicBlock) n.f1.accept(this, argu)).name;
         BasicBlock l = new BasicBlock();
         l.name = "TEMP" + " " + num;
         l.type = "Temporary";
         in_temp = 0;
         return (R) l;
      } else {
         in_temp = 1;
         n.f0.accept(this, argu);
       String num = ((BasicBlock) n.f1.accept(this, argu)).name;
        BasicBlock l = new BasicBlock();
        l.type = "Temporary";
        l.name = "TEMP"+" "+num;
      //   System.out.println(num);
        int temp_num = Integer.parseInt(num);
        Vector<Liveranges> vv = var_live_ranges.get(current_procedure);
        for(int i=0;i<vv.size();i++)
        {
           Liveranges element = vv.get(i);
         //   System.out.println("man here!"+element.temp + " "+ l.name);
           if(element.temp.equals(l.name))
           {
               l.is_reg = element.is_reg;
               if(temp_num >= 4 && temp_num <  procedure_attr.get(current_procedure).argu)
               {
                  l.is_argu = true;
               }
               if(element.is_reg)
               {
                  l.register = element.register;
               }
               else
               {
                  l.stackspace = element.stackspace;
               }
               
           }
        }
      in_temp =0;
         return (R)l;
      }
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret = null;
      if (parse_no == 1) {
         n.f0.accept(this, argu);
         // if (in_temp == 0)
         // System.out.println("MOVE v1 " + n.f0.tokenImage);
         BasicBlock l = new BasicBlock();
         l.name = n.f0.tokenImage;
         l.type = "Integer";
         return (R) (l);
      } else {
         n.f0.accept(this, argu);
         BasicBlock l = new BasicBlock();
         if(in_temp == 0 && in_hload ==0 && in_hstore == 0 && omg==0)
         System.out.println("\t"+"\t"+"MOVE v1 "+n.f0.tokenImage);
         l.code_2 = "v1";
         l.register ="v1";
         l.type = "Integer";
         l.name = n.f0.tokenImage;
         return (R)l;
      }
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret = null;
      if (parse_no == 1) {
         n.f0.accept(this, argu);
         BasicBlock l = new BasicBlock();
         l.name = n.f0.tokenImage;
         l.type = "Label";
         if (in_cjmp != 1 && in_jmp != 1 && (in_stlist == 1) && in_smpl == 0) {
            counter++;
            l.number = counter;
            procedure_bb.get(current_procedure).add(l);
            // System.out.println(l.name);
         }

         return (R) l;
      } 
      else 
      {
         BasicBlock l = new BasicBlock();
         l.type = "Label";
         n.f0.accept(this, argu);
         
         l.code_2 = n.f0.tokenImage;
         l.name = n.f0.tokenImage;
          if (in_cjmp != 1 && in_jmp != 1 && (in_stlist == 1) && in_smpl == 0) {
            counter++;
            System.out.println(l.name+"_"+current_procedure);
         }
         return (R)l;
      }
   }

}
